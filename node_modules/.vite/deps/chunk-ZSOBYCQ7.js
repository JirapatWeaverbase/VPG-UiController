import {
  ThemeProvider_default,
  _extends,
  _objectWithoutPropertiesLoose,
  createCssVarsProvider,
  createGetCssVar,
  createTheme_default,
  createTypography,
  deepmerge,
  defaultSxConfig_default,
  getOverlayAlpha_default,
  identifier_default,
  init_deepmerge,
  init_extends,
  init_formatMuiErrorMessage,
  prepareCssVars_default,
  require_colorManipulator,
  require_prop_types,
  styleFunctionSx_default,
  useThemeProps2 as useThemeProps
} from "./chunk-Y3OPFU5A.js";
import {
  require_jsx_runtime
} from "./chunk-FEVPAJEA.js";
import {
  require_react
} from "./chunk-X6MODOAL.js";
import {
  __toESM
} from "./chunk-J43GMYXM.js";

// node_modules/@mui/x-date-pickers/LocalizationProvider/LocalizationProvider.js
init_extends();
var React2 = __toESM(require_react());
var import_prop_types2 = __toESM(require_prop_types());

// node_modules/@mui/material/styles/index.js
init_formatMuiErrorMessage();

// node_modules/@mui/material/styles/adaptV4Theme.js
init_extends();

// node_modules/@mui/material/styles/createMuiStrictModeTheme.js
init_deepmerge();

// node_modules/@mui/material/styles/cssUtils.js
function getUnit(input) {
  return String(input).match(/[\d.\-+]*\s*(.*)/)[1] || "";
}
function toUnitless(length) {
  return parseFloat(length);
}

// node_modules/@mui/material/styles/responsiveFontSizes.js
init_extends();
init_formatMuiErrorMessage();

// node_modules/@mui/material/styles/ThemeProvider.js
init_extends();
var React = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());
var import_jsx_runtime = __toESM(require_jsx_runtime());
"use client";
var _excluded = ["theme"];
function ThemeProvider(_ref) {
  let {
    theme: themeInput
  } = _ref, props = _objectWithoutPropertiesLoose(_ref, _excluded);
  const scopedTheme = themeInput[identifier_default];
  return (0, import_jsx_runtime.jsx)(ThemeProvider_default, _extends({}, props, {
    themeId: scopedTheme ? identifier_default : void 0,
    theme: scopedTheme || themeInput
  }));
}
true ? ThemeProvider.propTypes = {
  children: import_prop_types.default.node,
  theme: import_prop_types.default.oneOfType([import_prop_types.default.object, import_prop_types.default.func]).isRequired
} : void 0;

// node_modules/@mui/material/styles/makeStyles.js
init_formatMuiErrorMessage();

// node_modules/@mui/material/styles/withStyles.js
init_formatMuiErrorMessage();

// node_modules/@mui/material/styles/withTheme.js
init_formatMuiErrorMessage();

// node_modules/@mui/material/styles/CssVarsProvider.js
init_extends();

// node_modules/@mui/material/styles/experimental_extendTheme.js
init_extends();
init_deepmerge();
var import_colorManipulator = __toESM(require_colorManipulator());

// node_modules/@mui/material/styles/shouldSkipGeneratingVar.js
function shouldSkipGeneratingVar(keys) {
  var _keys$;
  return !!keys[0].match(/(cssVarPrefix|typography|mixins|breakpoints|direction|transitions)/) || !!keys[0].match(/sxConfig$/) || keys[0] === "palette" && !!((_keys$ = keys[1]) != null && _keys$.match(/(mode|contrastThreshold|tonalOffset)/));
}

// node_modules/@mui/material/styles/experimental_extendTheme.js
var _excluded2 = ["colorSchemes", "cssVarPrefix", "shouldSkipGeneratingVar"];
var _excluded22 = ["palette"];
var defaultDarkOverlays = [...Array(25)].map((_, index) => {
  if (index === 0) {
    return void 0;
  }
  const overlay = getOverlayAlpha_default(index);
  return `linear-gradient(rgba(255 255 255 / ${overlay}), rgba(255 255 255 / ${overlay}))`;
});
function assignNode(obj, keys) {
  keys.forEach((k) => {
    if (!obj[k]) {
      obj[k] = {};
    }
  });
}
function setColor(obj, key, defaultValue) {
  if (!obj[key] && defaultValue) {
    obj[key] = defaultValue;
  }
}
function toRgb(color) {
  if (!color || !color.startsWith("hsl")) {
    return color;
  }
  return (0, import_colorManipulator.hslToRgb)(color);
}
function setColorChannel(obj, key) {
  if (!(`${key}Channel` in obj)) {
    obj[`${key}Channel`] = (0, import_colorManipulator.private_safeColorChannel)(toRgb(obj[key]), `MUI: Can't create \`palette.${key}Channel\` because \`palette.${key}\` is not one of these formats: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().
To suppress this warning, you need to explicitly provide the \`palette.${key}Channel\` as a string (in rgb format, for example "12 12 12") or undefined if you want to remove the channel token.`);
  }
}
var silent = (fn) => {
  try {
    return fn();
  } catch (error) {
  }
  return void 0;
};
var createGetCssVar2 = (cssVarPrefix = "mui") => createGetCssVar(cssVarPrefix);
function extendTheme(options = {}, ...args) {
  var _colorSchemesInput$li, _colorSchemesInput$da, _colorSchemesInput$li2, _colorSchemesInput$li3, _colorSchemesInput$da2, _colorSchemesInput$da3;
  const {
    colorSchemes: colorSchemesInput = {},
    cssVarPrefix = "mui",
    shouldSkipGeneratingVar: shouldSkipGeneratingVar2 = shouldSkipGeneratingVar
  } = options, input = _objectWithoutPropertiesLoose(options, _excluded2);
  const getCssVar = createGetCssVar2(cssVarPrefix);
  const _createThemeWithoutVa = createTheme_default(_extends({}, input, colorSchemesInput.light && {
    palette: (_colorSchemesInput$li = colorSchemesInput.light) == null ? void 0 : _colorSchemesInput$li.palette
  })), {
    palette: lightPalette
  } = _createThemeWithoutVa, muiTheme = _objectWithoutPropertiesLoose(_createThemeWithoutVa, _excluded22);
  const {
    palette: darkPalette
  } = createTheme_default({
    palette: _extends({
      mode: "dark"
    }, (_colorSchemesInput$da = colorSchemesInput.dark) == null ? void 0 : _colorSchemesInput$da.palette)
  });
  let theme = _extends({}, muiTheme, {
    cssVarPrefix,
    getCssVar,
    colorSchemes: _extends({}, colorSchemesInput, {
      light: _extends({}, colorSchemesInput.light, {
        palette: lightPalette,
        opacity: _extends({
          inputPlaceholder: 0.42,
          inputUnderline: 0.42,
          switchTrackDisabled: 0.12,
          switchTrack: 0.38
        }, (_colorSchemesInput$li2 = colorSchemesInput.light) == null ? void 0 : _colorSchemesInput$li2.opacity),
        overlays: ((_colorSchemesInput$li3 = colorSchemesInput.light) == null ? void 0 : _colorSchemesInput$li3.overlays) || []
      }),
      dark: _extends({}, colorSchemesInput.dark, {
        palette: darkPalette,
        opacity: _extends({
          inputPlaceholder: 0.5,
          inputUnderline: 0.7,
          switchTrackDisabled: 0.2,
          switchTrack: 0.3
        }, (_colorSchemesInput$da2 = colorSchemesInput.dark) == null ? void 0 : _colorSchemesInput$da2.opacity),
        overlays: ((_colorSchemesInput$da3 = colorSchemesInput.dark) == null ? void 0 : _colorSchemesInput$da3.overlays) || defaultDarkOverlays
      })
    })
  });
  Object.keys(theme.colorSchemes).forEach((key) => {
    const palette = theme.colorSchemes[key].palette;
    const setCssVarColor = (cssVar) => {
      const tokens = cssVar.split("-");
      const color = tokens[1];
      const colorToken = tokens[2];
      return getCssVar(cssVar, palette[color][colorToken]);
    };
    if (key === "light") {
      setColor(palette.common, "background", "#fff");
      setColor(palette.common, "onBackground", "#000");
    } else {
      setColor(palette.common, "background", "#000");
      setColor(palette.common, "onBackground", "#fff");
    }
    assignNode(palette, ["Alert", "AppBar", "Avatar", "Button", "Chip", "FilledInput", "LinearProgress", "Skeleton", "Slider", "SnackbarContent", "SpeedDialAction", "StepConnector", "StepContent", "Switch", "TableCell", "Tooltip"]);
    if (key === "light") {
      setColor(palette.Alert, "errorColor", (0, import_colorManipulator.private_safeDarken)(palette.error.light, 0.6));
      setColor(palette.Alert, "infoColor", (0, import_colorManipulator.private_safeDarken)(palette.info.light, 0.6));
      setColor(palette.Alert, "successColor", (0, import_colorManipulator.private_safeDarken)(palette.success.light, 0.6));
      setColor(palette.Alert, "warningColor", (0, import_colorManipulator.private_safeDarken)(palette.warning.light, 0.6));
      setColor(palette.Alert, "errorFilledBg", setCssVarColor("palette-error-main"));
      setColor(palette.Alert, "infoFilledBg", setCssVarColor("palette-info-main"));
      setColor(palette.Alert, "successFilledBg", setCssVarColor("palette-success-main"));
      setColor(palette.Alert, "warningFilledBg", setCssVarColor("palette-warning-main"));
      setColor(palette.Alert, "errorFilledColor", silent(() => lightPalette.getContrastText(palette.error.main)));
      setColor(palette.Alert, "infoFilledColor", silent(() => lightPalette.getContrastText(palette.info.main)));
      setColor(palette.Alert, "successFilledColor", silent(() => lightPalette.getContrastText(palette.success.main)));
      setColor(palette.Alert, "warningFilledColor", silent(() => lightPalette.getContrastText(palette.warning.main)));
      setColor(palette.Alert, "errorStandardBg", (0, import_colorManipulator.private_safeLighten)(palette.error.light, 0.9));
      setColor(palette.Alert, "infoStandardBg", (0, import_colorManipulator.private_safeLighten)(palette.info.light, 0.9));
      setColor(palette.Alert, "successStandardBg", (0, import_colorManipulator.private_safeLighten)(palette.success.light, 0.9));
      setColor(palette.Alert, "warningStandardBg", (0, import_colorManipulator.private_safeLighten)(palette.warning.light, 0.9));
      setColor(palette.Alert, "errorIconColor", setCssVarColor("palette-error-main"));
      setColor(palette.Alert, "infoIconColor", setCssVarColor("palette-info-main"));
      setColor(palette.Alert, "successIconColor", setCssVarColor("palette-success-main"));
      setColor(palette.Alert, "warningIconColor", setCssVarColor("palette-warning-main"));
      setColor(palette.AppBar, "defaultBg", setCssVarColor("palette-grey-100"));
      setColor(palette.Avatar, "defaultBg", setCssVarColor("palette-grey-400"));
      setColor(palette.Button, "inheritContainedBg", setCssVarColor("palette-grey-300"));
      setColor(palette.Button, "inheritContainedHoverBg", setCssVarColor("palette-grey-A100"));
      setColor(palette.Chip, "defaultBorder", setCssVarColor("palette-grey-400"));
      setColor(palette.Chip, "defaultAvatarColor", setCssVarColor("palette-grey-700"));
      setColor(palette.Chip, "defaultIconColor", setCssVarColor("palette-grey-700"));
      setColor(palette.FilledInput, "bg", "rgba(0, 0, 0, 0.06)");
      setColor(palette.FilledInput, "hoverBg", "rgba(0, 0, 0, 0.09)");
      setColor(palette.FilledInput, "disabledBg", "rgba(0, 0, 0, 0.12)");
      setColor(palette.LinearProgress, "primaryBg", (0, import_colorManipulator.private_safeLighten)(palette.primary.main, 0.62));
      setColor(palette.LinearProgress, "secondaryBg", (0, import_colorManipulator.private_safeLighten)(palette.secondary.main, 0.62));
      setColor(palette.LinearProgress, "errorBg", (0, import_colorManipulator.private_safeLighten)(palette.error.main, 0.62));
      setColor(palette.LinearProgress, "infoBg", (0, import_colorManipulator.private_safeLighten)(palette.info.main, 0.62));
      setColor(palette.LinearProgress, "successBg", (0, import_colorManipulator.private_safeLighten)(palette.success.main, 0.62));
      setColor(palette.LinearProgress, "warningBg", (0, import_colorManipulator.private_safeLighten)(palette.warning.main, 0.62));
      setColor(palette.Skeleton, "bg", `rgba(${setCssVarColor("palette-text-primaryChannel")} / 0.11)`);
      setColor(palette.Slider, "primaryTrack", (0, import_colorManipulator.private_safeLighten)(palette.primary.main, 0.62));
      setColor(palette.Slider, "secondaryTrack", (0, import_colorManipulator.private_safeLighten)(palette.secondary.main, 0.62));
      setColor(palette.Slider, "errorTrack", (0, import_colorManipulator.private_safeLighten)(palette.error.main, 0.62));
      setColor(palette.Slider, "infoTrack", (0, import_colorManipulator.private_safeLighten)(palette.info.main, 0.62));
      setColor(palette.Slider, "successTrack", (0, import_colorManipulator.private_safeLighten)(palette.success.main, 0.62));
      setColor(palette.Slider, "warningTrack", (0, import_colorManipulator.private_safeLighten)(palette.warning.main, 0.62));
      const snackbarContentBackground = (0, import_colorManipulator.private_safeEmphasize)(palette.background.default, 0.8);
      setColor(palette.SnackbarContent, "bg", snackbarContentBackground);
      setColor(palette.SnackbarContent, "color", silent(() => lightPalette.getContrastText(snackbarContentBackground)));
      setColor(palette.SpeedDialAction, "fabHoverBg", (0, import_colorManipulator.private_safeEmphasize)(palette.background.paper, 0.15));
      setColor(palette.StepConnector, "border", setCssVarColor("palette-grey-400"));
      setColor(palette.StepContent, "border", setCssVarColor("palette-grey-400"));
      setColor(palette.Switch, "defaultColor", setCssVarColor("palette-common-white"));
      setColor(palette.Switch, "defaultDisabledColor", setCssVarColor("palette-grey-100"));
      setColor(palette.Switch, "primaryDisabledColor", (0, import_colorManipulator.private_safeLighten)(palette.primary.main, 0.62));
      setColor(palette.Switch, "secondaryDisabledColor", (0, import_colorManipulator.private_safeLighten)(palette.secondary.main, 0.62));
      setColor(palette.Switch, "errorDisabledColor", (0, import_colorManipulator.private_safeLighten)(palette.error.main, 0.62));
      setColor(palette.Switch, "infoDisabledColor", (0, import_colorManipulator.private_safeLighten)(palette.info.main, 0.62));
      setColor(palette.Switch, "successDisabledColor", (0, import_colorManipulator.private_safeLighten)(palette.success.main, 0.62));
      setColor(palette.Switch, "warningDisabledColor", (0, import_colorManipulator.private_safeLighten)(palette.warning.main, 0.62));
      setColor(palette.TableCell, "border", (0, import_colorManipulator.private_safeLighten)((0, import_colorManipulator.private_safeAlpha)(palette.divider, 1), 0.88));
      setColor(palette.Tooltip, "bg", (0, import_colorManipulator.private_safeAlpha)(palette.grey[700], 0.92));
    } else {
      setColor(palette.Alert, "errorColor", (0, import_colorManipulator.private_safeLighten)(palette.error.light, 0.6));
      setColor(palette.Alert, "infoColor", (0, import_colorManipulator.private_safeLighten)(palette.info.light, 0.6));
      setColor(palette.Alert, "successColor", (0, import_colorManipulator.private_safeLighten)(palette.success.light, 0.6));
      setColor(palette.Alert, "warningColor", (0, import_colorManipulator.private_safeLighten)(palette.warning.light, 0.6));
      setColor(palette.Alert, "errorFilledBg", setCssVarColor("palette-error-dark"));
      setColor(palette.Alert, "infoFilledBg", setCssVarColor("palette-info-dark"));
      setColor(palette.Alert, "successFilledBg", setCssVarColor("palette-success-dark"));
      setColor(palette.Alert, "warningFilledBg", setCssVarColor("palette-warning-dark"));
      setColor(palette.Alert, "errorFilledColor", silent(() => darkPalette.getContrastText(palette.error.dark)));
      setColor(palette.Alert, "infoFilledColor", silent(() => darkPalette.getContrastText(palette.info.dark)));
      setColor(palette.Alert, "successFilledColor", silent(() => darkPalette.getContrastText(palette.success.dark)));
      setColor(palette.Alert, "warningFilledColor", silent(() => darkPalette.getContrastText(palette.warning.dark)));
      setColor(palette.Alert, "errorStandardBg", (0, import_colorManipulator.private_safeDarken)(palette.error.light, 0.9));
      setColor(palette.Alert, "infoStandardBg", (0, import_colorManipulator.private_safeDarken)(palette.info.light, 0.9));
      setColor(palette.Alert, "successStandardBg", (0, import_colorManipulator.private_safeDarken)(palette.success.light, 0.9));
      setColor(palette.Alert, "warningStandardBg", (0, import_colorManipulator.private_safeDarken)(palette.warning.light, 0.9));
      setColor(palette.Alert, "errorIconColor", setCssVarColor("palette-error-main"));
      setColor(palette.Alert, "infoIconColor", setCssVarColor("palette-info-main"));
      setColor(palette.Alert, "successIconColor", setCssVarColor("palette-success-main"));
      setColor(palette.Alert, "warningIconColor", setCssVarColor("palette-warning-main"));
      setColor(palette.AppBar, "defaultBg", setCssVarColor("palette-grey-900"));
      setColor(palette.AppBar, "darkBg", setCssVarColor("palette-background-paper"));
      setColor(palette.AppBar, "darkColor", setCssVarColor("palette-text-primary"));
      setColor(palette.Avatar, "defaultBg", setCssVarColor("palette-grey-600"));
      setColor(palette.Button, "inheritContainedBg", setCssVarColor("palette-grey-800"));
      setColor(palette.Button, "inheritContainedHoverBg", setCssVarColor("palette-grey-700"));
      setColor(palette.Chip, "defaultBorder", setCssVarColor("palette-grey-700"));
      setColor(palette.Chip, "defaultAvatarColor", setCssVarColor("palette-grey-300"));
      setColor(palette.Chip, "defaultIconColor", setCssVarColor("palette-grey-300"));
      setColor(palette.FilledInput, "bg", "rgba(255, 255, 255, 0.09)");
      setColor(palette.FilledInput, "hoverBg", "rgba(255, 255, 255, 0.13)");
      setColor(palette.FilledInput, "disabledBg", "rgba(255, 255, 255, 0.12)");
      setColor(palette.LinearProgress, "primaryBg", (0, import_colorManipulator.private_safeDarken)(palette.primary.main, 0.5));
      setColor(palette.LinearProgress, "secondaryBg", (0, import_colorManipulator.private_safeDarken)(palette.secondary.main, 0.5));
      setColor(palette.LinearProgress, "errorBg", (0, import_colorManipulator.private_safeDarken)(palette.error.main, 0.5));
      setColor(palette.LinearProgress, "infoBg", (0, import_colorManipulator.private_safeDarken)(palette.info.main, 0.5));
      setColor(palette.LinearProgress, "successBg", (0, import_colorManipulator.private_safeDarken)(palette.success.main, 0.5));
      setColor(palette.LinearProgress, "warningBg", (0, import_colorManipulator.private_safeDarken)(palette.warning.main, 0.5));
      setColor(palette.Skeleton, "bg", `rgba(${setCssVarColor("palette-text-primaryChannel")} / 0.13)`);
      setColor(palette.Slider, "primaryTrack", (0, import_colorManipulator.private_safeDarken)(palette.primary.main, 0.5));
      setColor(palette.Slider, "secondaryTrack", (0, import_colorManipulator.private_safeDarken)(palette.secondary.main, 0.5));
      setColor(palette.Slider, "errorTrack", (0, import_colorManipulator.private_safeDarken)(palette.error.main, 0.5));
      setColor(palette.Slider, "infoTrack", (0, import_colorManipulator.private_safeDarken)(palette.info.main, 0.5));
      setColor(palette.Slider, "successTrack", (0, import_colorManipulator.private_safeDarken)(palette.success.main, 0.5));
      setColor(palette.Slider, "warningTrack", (0, import_colorManipulator.private_safeDarken)(palette.warning.main, 0.5));
      const snackbarContentBackground = (0, import_colorManipulator.private_safeEmphasize)(palette.background.default, 0.98);
      setColor(palette.SnackbarContent, "bg", snackbarContentBackground);
      setColor(palette.SnackbarContent, "color", silent(() => darkPalette.getContrastText(snackbarContentBackground)));
      setColor(palette.SpeedDialAction, "fabHoverBg", (0, import_colorManipulator.private_safeEmphasize)(palette.background.paper, 0.15));
      setColor(palette.StepConnector, "border", setCssVarColor("palette-grey-600"));
      setColor(palette.StepContent, "border", setCssVarColor("palette-grey-600"));
      setColor(palette.Switch, "defaultColor", setCssVarColor("palette-grey-300"));
      setColor(palette.Switch, "defaultDisabledColor", setCssVarColor("palette-grey-600"));
      setColor(palette.Switch, "primaryDisabledColor", (0, import_colorManipulator.private_safeDarken)(palette.primary.main, 0.55));
      setColor(palette.Switch, "secondaryDisabledColor", (0, import_colorManipulator.private_safeDarken)(palette.secondary.main, 0.55));
      setColor(palette.Switch, "errorDisabledColor", (0, import_colorManipulator.private_safeDarken)(palette.error.main, 0.55));
      setColor(palette.Switch, "infoDisabledColor", (0, import_colorManipulator.private_safeDarken)(palette.info.main, 0.55));
      setColor(palette.Switch, "successDisabledColor", (0, import_colorManipulator.private_safeDarken)(palette.success.main, 0.55));
      setColor(palette.Switch, "warningDisabledColor", (0, import_colorManipulator.private_safeDarken)(palette.warning.main, 0.55));
      setColor(palette.TableCell, "border", (0, import_colorManipulator.private_safeDarken)((0, import_colorManipulator.private_safeAlpha)(palette.divider, 1), 0.68));
      setColor(palette.Tooltip, "bg", (0, import_colorManipulator.private_safeAlpha)(palette.grey[700], 0.92));
    }
    setColorChannel(palette.background, "default");
    setColorChannel(palette.background, "paper");
    setColorChannel(palette.common, "background");
    setColorChannel(palette.common, "onBackground");
    setColorChannel(palette, "divider");
    Object.keys(palette).forEach((color) => {
      const colors = palette[color];
      if (colors && typeof colors === "object") {
        if (colors.main) {
          setColor(palette[color], "mainChannel", (0, import_colorManipulator.private_safeColorChannel)(toRgb(colors.main)));
        }
        if (colors.light) {
          setColor(palette[color], "lightChannel", (0, import_colorManipulator.private_safeColorChannel)(toRgb(colors.light)));
        }
        if (colors.dark) {
          setColor(palette[color], "darkChannel", (0, import_colorManipulator.private_safeColorChannel)(toRgb(colors.dark)));
        }
        if (colors.contrastText) {
          setColor(palette[color], "contrastTextChannel", (0, import_colorManipulator.private_safeColorChannel)(toRgb(colors.contrastText)));
        }
        if (color === "text") {
          setColorChannel(palette[color], "primary");
          setColorChannel(palette[color], "secondary");
        }
        if (color === "action") {
          if (colors.active) {
            setColorChannel(palette[color], "active");
          }
          if (colors.selected) {
            setColorChannel(palette[color], "selected");
          }
        }
      }
    });
  });
  theme = args.reduce((acc, argument) => deepmerge(acc, argument), theme);
  const parserConfig = {
    prefix: cssVarPrefix,
    shouldSkipGeneratingVar: shouldSkipGeneratingVar2
  };
  const {
    vars: themeVars,
    generateCssVars
  } = prepareCssVars_default(theme, parserConfig);
  theme.vars = themeVars;
  theme.generateCssVars = generateCssVars;
  theme.shouldSkipGeneratingVar = shouldSkipGeneratingVar2;
  theme.unstable_sxConfig = _extends({}, defaultSxConfig_default, input == null ? void 0 : input.unstable_sxConfig);
  theme.unstable_sx = function sx(props) {
    return styleFunctionSx_default({
      sx: props,
      theme: this
    });
  };
  return theme;
}

// node_modules/@mui/material/styles/excludeVariablesFromRoot.js
var excludeVariablesFromRoot = (cssVarPrefix) => [...[...Array(24)].map((_, index) => `--${cssVarPrefix ? `${cssVarPrefix}-` : ""}overlays-${index + 1}`), `--${cssVarPrefix ? `${cssVarPrefix}-` : ""}palette-AppBar-darkBg`, `--${cssVarPrefix ? `${cssVarPrefix}-` : ""}palette-AppBar-darkColor`];
var excludeVariablesFromRoot_default = excludeVariablesFromRoot;

// node_modules/@mui/material/styles/CssVarsProvider.js
"use client";
var defaultTheme = extendTheme();
var {
  CssVarsProvider,
  useColorScheme,
  getInitColorSchemeScript
} = createCssVarsProvider({
  themeId: identifier_default,
  theme: defaultTheme,
  attribute: "data-mui-color-scheme",
  modeStorageKey: "mui-mode",
  colorSchemeStorageKey: "mui-color-scheme",
  defaultColorScheme: {
    light: "light",
    dark: "dark"
  },
  resolveTheme: (theme) => {
    const newTheme = _extends({}, theme, {
      typography: createTypography(theme.palette, theme.typography)
    });
    newTheme.unstable_sx = function sx(props) {
      return styleFunctionSx_default({
        sx: props,
        theme: this
      });
    };
    return newTheme;
  },
  excludeVariablesFromRoot: excludeVariablesFromRoot_default
});

// node_modules/@mui/material/styles/index.js
"use client";

// node_modules/@mui/x-date-pickers/locales/utils/getPickersLocalization.js
init_extends();
var getPickersLocalization = (pickersTranslations) => {
  return {
    components: {
      MuiLocalizationProvider: {
        defaultProps: {
          localeText: _extends({}, pickersTranslations)
        }
      }
    }
  };
};

// node_modules/@mui/x-date-pickers/locales/nlNL.js
var nlNLPickers = {
  previousMonth: "Vorige maand",
  nextMonth: "Volgende maand",
  openPreviousView: "open vorige view",
  openNextView: "open volgende view",
  calendarViewSwitchingButtonAriaLabel: (view) => view === "year" ? "jaarweergave is geopend, schakel over naar kalenderweergave" : "kalenderweergave is geopend, switch naar jaarweergave",
  start: "Start",
  end: "Einde",
  cancelButtonLabel: "Annuleren",
  clearButtonLabel: "Resetten",
  okButtonLabel: "OK",
  todayButtonLabel: "Vandaag",
  clockLabelText: (view, time, adapter) => `Selecteer ${view}. ${time === null ? "Geen tijd geselecteerd" : `Geselecteerde tijd is ${adapter.format(time, "fullTime")}`}`,
  hoursClockNumberText: (hours) => `${hours} uren`,
  minutesClockNumberText: (minutes) => `${minutes} minuten`,
  secondsClockNumberText: (seconds) => `${seconds} seconden`,
  openDatePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Kies datum, geselecteerde datum is ${utils.format(utils.date(rawValue), "fullDate")}` : "Kies datum",
  openTimePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Kies tijd, geselecteerde tijd is ${utils.format(utils.date(rawValue), "fullTime")}` : "Kies tijd",
  timeTableLabel: "kies tijd",
  dateTableLabel: "kies datum"
};
var nlNL = getPickersLocalization(nlNLPickers);

// node_modules/@mui/x-date-pickers/locales/plPL.js
var plPLPickers = {
  previousMonth: "Poprzedni miesi\u0105c",
  nextMonth: "Nast\u0119pny miesi\u0105c",
  openPreviousView: "otw\xF3rz poprzedni widok",
  openNextView: "otw\xF3rz nast\u0119pny widok",
  calendarViewSwitchingButtonAriaLabel: (view) => view === "year" ? "otwarty jest widok roku, prze\u0142\u0105cz na widok kalendarza" : "otwarty jest widok kalendarza, prze\u0142\u0105cz na widok roku",
  start: "Pocz\u0105tek",
  end: "Koniec",
  cancelButtonLabel: "Anuluj",
  clearButtonLabel: "Wyczy\u015B\u0107",
  okButtonLabel: "Zatwierd\u017A",
  todayButtonLabel: "Dzisiaj",
  clockLabelText: (view, time, adapter) => `Select ${view}. ${time === null ? "Nie wybrano czasu" : `Wybrany czas to ${adapter.format(time, "fullTime")}`}`,
  hoursClockNumberText: (hours) => `${hours} godzin`,
  minutesClockNumberText: (minutes) => `${minutes} minut`,
  secondsClockNumberText: (seconds) => `${seconds} sekund`,
  openDatePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Wybierz dat\u0119, obecnie wybrana data to ${utils.format(utils.date(rawValue), "fullDate")}` : "Wybierz dat\u0119",
  openTimePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Wybierz czas, obecnie wybrany czas to ${utils.format(utils.date(rawValue), "fullTime")}` : "Wybierz czas",
  timeTableLabel: "wybierz czas",
  dateTableLabel: "wybierz dat\u0119"
};
var plPL = getPickersLocalization(plPLPickers);

// node_modules/@mui/x-date-pickers/locales/ptBR.js
var ptBRPickers = {
  previousMonth: "M\xEAs anterior",
  nextMonth: "Pr\xF3ximo m\xEAs",
  openPreviousView: "Abrir pr\xF3xima sele\xE7\xE3o",
  openNextView: "Abrir sele\xE7\xE3o anterior",
  calendarViewSwitchingButtonAriaLabel: (view) => view === "year" ? "Sele\xE7\xE3o de ano est\xE1 aberta, alternando para sele\xE7\xE3o de calend\xE1rio" : "Sele\xE7\xE3o de calend\xE1rios est\xE1 aberta, alternando para sele\xE7\xE3o de ano",
  start: "In\xEDcio",
  end: "Fim",
  cancelButtonLabel: "Cancelar",
  clearButtonLabel: "Limpar",
  okButtonLabel: "OK",
  todayButtonLabel: "Hoje",
  datePickerDefaultToolbarTitle: "Selecione a data",
  dateTimePickerDefaultToolbarTitle: "Selecione data e hora",
  timePickerDefaultToolbarTitle: "Selecione a hora",
  dateRangePickerDefaultToolbarTitle: "Selecione o intervalo entre datas",
  clockLabelText: (view, time, adapter) => `Selecione ${view}. ${time === null ? "Hora n\xE3o selecionada" : `Selecionado a hora ${adapter.format(time, "fullTime")}`}`,
  hoursClockNumberText: (hours) => `${hours} horas`,
  minutesClockNumberText: (minutes) => `${minutes} minutos`,
  secondsClockNumberText: (seconds) => `${seconds} segundos`,
  openDatePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Escolha uma data, data selecionada ${utils.format(utils.date(rawValue), "fullDate")}` : "Escolha uma data",
  openTimePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Escolha uma hora, hora selecionada ${utils.format(utils.date(rawValue), "fullTime")}` : "Escolha uma hora",
  timeTableLabel: "escolha uma hora",
  dateTableLabel: "escolha uma data"
};
var ptBR = getPickersLocalization(ptBRPickers);

// node_modules/@mui/x-date-pickers/locales/trTR.js
var trTRPickers = {
  previousMonth: "\xD6nceki ay",
  nextMonth: "Sonraki ay",
  openPreviousView: "sonraki g\xF6r\xFCn\xFCm",
  openNextView: "\xF6nceki g\xF6r\xFCn\xFCm",
  calendarViewSwitchingButtonAriaLabel: (view) => view === "year" ? "y\u0131l g\xF6r\xFCn\xFCm\xFC a\xE7\u0131k, takvim g\xF6r\xFCn\xFCm\xFCne ge\xE7" : "takvim g\xF6r\xFCn\xFCm\xFC a\xE7\u0131k, y\u0131l g\xF6r\xFCn\xFCm\xFCne ge\xE7",
  inputModeToggleButtonAriaLabel: (isKeyboardInputOpen, viewType) => isKeyboardInputOpen ? `metin giri\u015Fi g\xF6r\xFCn\xFCm\xFC a\xE7\u0131k, \u015Furaya gidin: ${viewType} g\xF6r\xFCn\xFCm\xFC` : `${viewType} g\xF6r\xFCn\xFCm a\xE7\u0131k, metin giri\u015Fi g\xF6r\xFCn\xFCm\xFCne gidin`,
  start: "Ba\u015Flang\u0131\xE7",
  end: "Biti\u015F",
  cancelButtonLabel: "iptal",
  clearButtonLabel: "Temizle",
  okButtonLabel: "Tamam",
  todayButtonLabel: "Bug\xFCn",
  datePickerDefaultToolbarTitle: "Tarih Se\xE7",
  dateTimePickerDefaultToolbarTitle: "Tarih & Saat se\xE7",
  timePickerDefaultToolbarTitle: "Saat se\xE7",
  dateRangePickerDefaultToolbarTitle: "Tarih aral\u0131\u011F\u0131 se\xE7in",
  clockLabelText: (view, time, adapter) => `${view} se\xE7.  ${time === null ? "Zaman se\xE7ilmedi" : `Se\xE7ilen zaman: ${adapter.format(time, "fullTime")}`}`,
  hoursClockNumberText: (hours) => `${hours} saat`,
  minutesClockNumberText: (minutes) => `${minutes} dakika`,
  secondsClockNumberText: (seconds) => `${seconds} saniye`,
  openDatePickerDialogue: (value, utils) => value !== null && utils.isValid(value) ? `Tarih se\xE7in, se\xE7ilen tarih: ${utils.format(value, "fullDate")}` : "Tarih se\xE7",
  openTimePickerDialogue: (value, utils) => value !== null && utils.isValid(value) ? `Saat se\xE7in, se\xE7ilen saat: ${utils.format(value, "fullTime")}` : "Saat se\xE7",
  timeTableLabel: "saat se\xE7",
  dateTableLabel: "tarih se\xE7"
};
var trTR = getPickersLocalization(trTRPickers);

// node_modules/@mui/x-date-pickers/locales/deDE.js
var clockViews = {
  hours: "Stunden",
  minutes: "Minuten",
  seconds: "Sekunden"
};
var pickerViews = {
  calendar: "Kalenderansicht",
  clock: "Uhransicht"
};
var deDEPickers = {
  previousMonth: "Letzter Monat",
  nextMonth: "N\xE4chster Monat",
  openPreviousView: "Letzte Ansicht \xF6ffnen",
  openNextView: "N\xE4chste Ansicht \xF6ffnen",
  calendarViewSwitchingButtonAriaLabel: (view) => view === "year" ? "Jahresansicht ist ge\xF6ffnet, zur Kalenderansicht wechseln" : "Kalenderansicht ist ge\xF6ffnet, zur Jahresansicht wechseln",
  inputModeToggleButtonAriaLabel: (isKeyboardInputOpen, viewType) => isKeyboardInputOpen ? `Texteingabeansicht ist ge\xF6ffnet, zur ${pickerViews[viewType]} wechseln` : `${pickerViews[viewType]} ist ge\xF6ffnet, zur Texteingabeansicht wechseln`,
  start: "Beginn",
  end: "Ende",
  cancelButtonLabel: "Abbrechen",
  clearButtonLabel: "L\xF6schen",
  okButtonLabel: "OK",
  todayButtonLabel: "Heute",
  datePickerDefaultToolbarTitle: "Datum ausw\xE4hlen",
  dateTimePickerDefaultToolbarTitle: "Datum & Uhrzeit ausw\xE4hlen",
  timePickerDefaultToolbarTitle: "Uhrzeit ausw\xE4hlen",
  dateRangePickerDefaultToolbarTitle: "Datumsbereich ausw\xE4hlen",
  clockLabelText: (view, time, adapter) => {
    var _clockViews$view;
    return `${(_clockViews$view = clockViews[view]) != null ? _clockViews$view : view} ausw\xE4hlen. ${time === null ? "Keine Uhrzeit ausgew\xE4hlt" : `Gew\xE4hlte Uhrzeit ist ${adapter.format(time, "fullTime")}`}`;
  },
  hoursClockNumberText: (hours) => `${hours} ${clockViews.hours}`,
  minutesClockNumberText: (minutes) => `${minutes} ${clockViews.minutes}`,
  secondsClockNumberText: (seconds) => `${seconds}  ${clockViews.seconds}`,
  openDatePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Datum ausw\xE4hlen, gew\xE4hltes Datum ist ${utils.format(utils.date(rawValue), "fullDate")}` : "Datum ausw\xE4hlen",
  openTimePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Uhrzeit ausw\xE4hlen, gew\xE4hlte Uhrzeit ist ${utils.format(utils.date(rawValue), "fullTime")}` : "Uhrzeit ausw\xE4hlen",
  timeTableLabel: "Uhrzeit ausw\xE4hlen",
  dateTableLabel: "Datum ausw\xE4hlen"
};
var deDE = getPickersLocalization(deDEPickers);

// node_modules/@mui/x-date-pickers/locales/esES.js
var views = {
  hours: "las horas",
  minutes: "los minutos",
  seconds: "los segundos"
};
var esESPickers = {
  previousMonth: "\xDAltimo mes",
  nextMonth: "Pr\xF3ximo mes",
  openPreviousView: "abrir la \xFAltima vista",
  openNextView: "abrir la siguiente vista",
  calendarViewSwitchingButtonAriaLabel: (view) => view === "year" ? "la vista del a\xF1o est\xE1 abierta, cambie a la vista de calendario" : "la vista de calendario est\xE1 abierta, cambie a la vista del a\xF1o",
  inputModeToggleButtonAriaLabel: (isKeyboardInputOpen, viewType) => isKeyboardInputOpen ? `la vista de entrada de texto est\xE1 abierta, ir a la vista ${viewType}` : `la vista ${viewType} est\xE1 abierta, ir a la vista de entrada de texto`,
  start: "Empezar",
  end: "Terminar",
  cancelButtonLabel: "Cancelar",
  clearButtonLabel: "Limpiar",
  okButtonLabel: "OK",
  todayButtonLabel: "Hoy",
  datePickerDefaultToolbarTitle: "Seleccionar fecha",
  dateTimePickerDefaultToolbarTitle: "Seleccionar fecha & hora",
  timePickerDefaultToolbarTitle: "Seleccionar hora",
  dateRangePickerDefaultToolbarTitle: "Seleccionar rango de fecha",
  clockLabelText: (view, time, adapter) => `Seleccione ${views[view]}. ${time === null ? "Sin tiempo seleccionado" : `El tiempo seleccionado es ${adapter.format(time, "fullTime")}`}`,
  hoursClockNumberText: (hours) => `${hours} horas`,
  minutesClockNumberText: (minutes) => `${minutes} minutos`,
  secondsClockNumberText: (seconds) => `${seconds} segundos`,
  openDatePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Elige la fecha, la fecha elegida es ${utils.format(utils.date(rawValue), "fullDate")}` : "Elige la fecha",
  openTimePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Elige la hora, la hora elegido es ${utils.format(utils.date(rawValue), "fullTime")}` : "Elige la hora",
  timeTableLabel: "elige la fecha",
  dateTableLabel: "elige la hora"
};
var esES = getPickersLocalization(esESPickers);

// node_modules/@mui/x-date-pickers/locales/faIR.js
var faIRPickers = {
  previousMonth: "\u0645\u0627\u0647 \u06AF\u0630\u0634\u062A\u0647",
  nextMonth: "\u0645\u0627\u0647 \u0622\u06CC\u0646\u062F\u0647",
  openPreviousView: "\u0646\u0645\u0627\u06CC \u0642\u0628\u0644\u06CC",
  openNextView: "\u0646\u0645\u0627\u06CC \u0628\u0639\u062F\u06CC",
  calendarViewSwitchingButtonAriaLabel: (view) => view === "year" ? "\u0646\u0645\u0627\u06CC \u0633\u0627\u0644 \u0628\u0627\u0632 \u0627\u0633\u062A\u060C \u0631\u0641\u062A\u0646 \u0628\u0647 \u0646\u0645\u0627\u06CC \u062A\u0642\u0648\u06CC\u0645" : "\u0646\u0645\u0627\u06CC \u062A\u0642\u0648\u06CC\u0645 \u0628\u0627\u0632 \u0627\u0633\u062A\u060C \u0631\u0641\u062A\u0646 \u0628\u0647 \u0646\u0645\u0627\u06CC \u0633\u0627\u0644",
  inputModeToggleButtonAriaLabel: (isKeyboardInputOpen, viewType) => isKeyboardInputOpen ? `\u0646\u0645\u0627\u06CC \u0648\u0631\u0648\u062F\u06CC \u0645\u062A\u0646 \u0628\u0627\u0632 \u0627\u0633\u062A\u060C \u0631\u0641\u062A\u0646 \u0628\u0647 \u0646\u0645\u0627\u06CC ${viewType}` : `\u0646\u0645\u0627\u06CC ${viewType} \u0628\u0627\u0632 \u0627\u0633\u062A\u060C \u0631\u0641\u062A\u0646 \u0628\u0647 \u0646\u0645\u0627\u06CC \u0648\u0631\u0648\u062F\u06CC \u0645\u062A\u0646`,
  start: "\u0634\u0631\u0648\u0639",
  end: "\u067E\u0627\u06CC\u0627\u0646",
  cancelButtonLabel: "\u0644\u063A\u0648",
  clearButtonLabel: "\u067E\u0627\u06A9 \u06A9\u0631\u062F\u0646",
  okButtonLabel: "\u0627\u0648\u06A9\u06CC",
  todayButtonLabel: "\u0627\u0645\u0631\u0648\u0632",
  datePickerDefaultToolbarTitle: "\u062A\u0627\u0631\u06CC\u062E \u0631\u0627 \u0627\u0646\u062A\u062E\u0627\u0628 \u06A9\u0646\u06CC\u062F",
  dateTimePickerDefaultToolbarTitle: "\u062A\u0627\u0631\u06CC\u062E \u0648 \u0633\u0627\u0639\u062A \u0631\u0627 \u0627\u0646\u062A\u062E\u0627\u0628 \u06A9\u0646\u06CC\u062F",
  timePickerDefaultToolbarTitle: "\u0633\u0627\u0639\u062A \u0631\u0627 \u0627\u0646\u062A\u062E\u0627\u0628 \u06A9\u0646\u06CC\u062F",
  dateRangePickerDefaultToolbarTitle: "\u0645\u062D\u062F\u0648\u062F\u0647 \u062A\u0627\u0631\u06CC\u062E \u0631\u0627 \u0627\u0646\u062A\u062E\u0627\u0628 \u06A9\u0646\u06CC\u062F",
  clockLabelText: (view, time, adapter) => `Select ${view}. ${time === null ? "\u0647\u06CC\u0686 \u0633\u0627\u0639\u062A\u06CC \u0627\u0646\u062A\u062E\u0627\u0628 \u0646\u0634\u062F\u0647 \u0627\u0633\u062A" : `\u0633\u0627\u0639\u062A \u0627\u0646\u062A\u062E\u0627\u0628 ${adapter.format(time, "fullTime")} \u0645\u06CC \u0628\u0627\u0634\u062F`}`,
  hoursClockNumberText: (hours) => `${hours} \u0633\u0627\u0639\u062A \u0647\u0627`,
  minutesClockNumberText: (minutes) => `${minutes} \u062F\u0642\u06CC\u0642\u0647 \u0647\u0627`,
  secondsClockNumberText: (seconds) => `${seconds} \u062B\u0627\u0646\u06CC\u0647 \u0647\u0627`,
  openDatePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `\u062A\u0627\u0631\u06CC\u062E \u0631\u0627 \u0627\u0646\u062A\u062E\u0627\u0628 \u06A9\u0646\u06CC\u062F\u060C \u062A\u0627\u0631\u06CC\u062E \u0627\u0646\u062A\u062E\u0627\u0628 \u0634\u062F\u0647 ${utils.format(utils.date(rawValue), "fullDate")} \u0645\u06CC \u0628\u0627\u0634\u062F` : "\u062A\u0627\u0631\u06CC\u062E \u0631\u0627 \u0627\u0646\u062A\u062E\u0627\u0628 \u06A9\u0646\u06CC\u062F",
  openTimePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `\u0633\u0627\u0639\u062A \u0631\u0627 \u0627\u0646\u062A\u062E\u0627\u0628 \u06A9\u0646\u06CC\u062F\u060C \u0633\u0627\u0639\u062A \u0627\u0646\u062A\u062E\u0627\u0628 \u0634\u062F\u0647 ${utils.format(utils.date(rawValue), "fullTime")} \u0645\u06CC \u0628\u0627\u0634\u062F` : "\u0633\u0627\u0639\u062A \u0631\u0627 \u0627\u0646\u062A\u062E\u0627\u0628 \u06A9\u0646\u06CC\u062F",
  timeTableLabel: "\u0627\u0646\u062A\u062E\u0627\u0628 \u062A\u0627\u0631\u06CC\u062E",
  dateTableLabel: "\u0627\u0646\u062A\u062E\u0627\u0628 \u0633\u0627\u0639\u062A"
};
var faIR = getPickersLocalization(faIRPickers);

// node_modules/@mui/x-date-pickers/locales/fiFI.js
var views2 = {
  hours: "tunnit",
  minutes: "minuutit",
  seconds: "sekuntit"
};
var viewTranslation = {
  calendar: "kalenteri",
  clock: "kello"
};
var fiFIPickers = {
  previousMonth: "Edellinen kuukausi",
  nextMonth: "Seuraava kuukausi",
  openPreviousView: "avaa edellinen kuukausi",
  openNextView: "avaa seuraava kuukausi",
  calendarViewSwitchingButtonAriaLabel: (view) => view === "year" ? "vuosin\xE4kym\xE4 on auki, vaihda kalenterin\xE4kym\xE4\xE4n" : "kalenterin\xE4kym\xE4 on auki, vaihda vuosin\xE4kym\xE4\xE4n",
  inputModeToggleButtonAriaLabel: (isKeyboardInputOpen, viewType) => isKeyboardInputOpen ? `tekstikentt\xE4 on auki, mene ${viewTranslation[viewType]}n\xE4kym\xE4\xE4n` : `${viewTranslation[viewType]}n\xE4kym\xE4 on auki, mene tekstikentt\xE4\xE4n`,
  start: "Alku",
  end: "Loppu",
  cancelButtonLabel: "Peruuta",
  clearButtonLabel: "Tyhjenn\xE4",
  okButtonLabel: "OK",
  todayButtonLabel: "T\xE4n\xE4\xE4n",
  datePickerDefaultToolbarTitle: "Valitse p\xE4iv\xE4",
  dateTimePickerDefaultToolbarTitle: "Valitse p\xE4iv\xE4 ja aika",
  timePickerDefaultToolbarTitle: "Valitse aika",
  dateRangePickerDefaultToolbarTitle: "Valitse aikav\xE4li",
  clockLabelText: (view, time, adapter) => `Valitse ${views2[view]}. ${time === null ? "Ei aikaa valittuna" : `Valittu aika on ${adapter.format(time, "fullTime")}`}`,
  hoursClockNumberText: (hours) => `${hours} tuntia`,
  minutesClockNumberText: (minutes) => `${minutes} minuuttia`,
  secondsClockNumberText: (seconds) => `${seconds} sekunttia`,
  openDatePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Valitse p\xE4iv\xE4, valittu p\xE4iv\xE4 on ${utils.format(utils.date(rawValue), "fullDate")}` : "Valitse p\xE4iv\xE4",
  openTimePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Valitse aika, valittu aika on ${utils.format(utils.date(rawValue), "fullTime")}` : "Valitse aika",
  timeTableLabel: "valitse aika",
  dateTableLabel: "valitse p\xE4iv\xE4"
};
var fiFI = getPickersLocalization(fiFIPickers);

// node_modules/@mui/x-date-pickers/locales/csCZ.js
var timeViews = {
  hours: "Hodiny",
  minutes: "Minuty",
  seconds: "Sekundy"
};
var pickerViews2 = {
  calendar: "kalend\xE1\u0159e",
  clock: "\u010Dasu"
};
var csCZPickers = {
  previousMonth: "Dal\u0161\xED m\u011Bs\xEDc",
  nextMonth: "P\u0159edchoz\xED month",
  openPreviousView: "otev\u0159\xEDt p\u0159edchoz\xED zobrazen\xED",
  openNextView: "otev\u0159\xEDt dal\u0161\xED zobrazen\xED",
  calendarViewSwitchingButtonAriaLabel: (view) => view === "year" ? "ro\u010Dn\xED zobrazen\xED otev\u0159eno, p\u0159epn\u011Bte do zobrazen\xED kalend\xE1\u0159e" : "zobrazen\xED kalend\xE1\u0159e otev\u0159eno, p\u0159epn\u011Bte do zobrazen\xED roku",
  inputModeToggleButtonAriaLabel: (isKeyboardInputOpen, viewType) => isKeyboardInputOpen ? `Zobrazen\xED pro zad\xE1v\xE1n\xED textu je otev\u0159en\xE9, p\u0159epn\u011Bte do zobrazen\xED ${pickerViews2[viewType]}` : `Zobrazen\xED ${pickerViews2[viewType]} je otev\u0159en\xE9, p\u0159epn\u011Bte do zobrazen\xED textov\xE9ho pole`,
  start: "Za\u010D\xE1tek",
  end: "Konec",
  cancelButtonLabel: "Zru\u0161it",
  clearButtonLabel: "Vymazat",
  okButtonLabel: "Potvrdit",
  todayButtonLabel: "Dnes",
  datePickerDefaultToolbarTitle: "Vyberte datum",
  dateTimePickerDefaultToolbarTitle: "Vyberte datum a \u010Das",
  timePickerDefaultToolbarTitle: "Vyberte \u010Das",
  dateRangePickerDefaultToolbarTitle: "Vyberete rozmez\xED dat",
  clockLabelText: (view, time, adapter) => {
    var _timeViews$view;
    return `${(_timeViews$view = timeViews[view]) != null ? _timeViews$view : view} vybr\xE1ny. ${time === null ? "Nen\xED vybr\xE1n \u010Das" : `Vybran\xFD \u010Das je ${adapter.format(time, "fullTime")}`}`;
  },
  hoursClockNumberText: (hours) => `${hours} hodin`,
  minutesClockNumberText: (minutes) => `${minutes} minut`,
  secondsClockNumberText: (seconds) => `${seconds} sekund`,
  openDatePickerDialogue: (value, utils) => value !== null && utils.isValid(value) ? `Vybran\xE9 datum, vybran\xE9 datum je ${utils.format(value, "fullDate")}` : "Vyberte datum",
  openTimePickerDialogue: (value, utils) => value !== null && utils.isValid(value) ? `Vybran\xE9 \u010Das, vybran\xFD \u010Das je ${utils.format(value, "fullTime")}` : "Vyberte \u010Das",
  timeTableLabel: "vyberte \u010Das",
  dateTableLabel: "vyberte datum"
};
var csCZ = getPickersLocalization(csCZPickers);

// node_modules/@mui/x-date-pickers/locales/frFR.js
var views3 = {
  hours: "heures",
  minutes: "minutes",
  seconds: "secondes"
};
var viewTranslation2 = {
  calendar: "calendrier",
  clock: "horloge"
};
var frFRPickers = {
  previousMonth: "Mois pr\xE9c\xE9dent",
  nextMonth: "Mois suivant",
  openPreviousView: "Ouvrir la vue pr\xE9c\xE9dente",
  openNextView: "Ouvrir la vue suivante",
  calendarViewSwitchingButtonAriaLabel: (view) => view === "year" ? "La vue ann\xE9e est ouverte, ouvrir la vue calendrier" : "La vue calendrier est ouverte, ouvrir la vue ann\xE9e",
  inputModeToggleButtonAriaLabel: (isKeyboardInputOpen, viewType) => isKeyboardInputOpen ? `passer du champ text au ${viewTranslation2[viewType]}` : `passer du ${viewTranslation2[viewType]} au champ text`,
  start: "D\xE9but",
  end: "Fin",
  cancelButtonLabel: "Annuler",
  clearButtonLabel: "Vider",
  okButtonLabel: "OK",
  todayButtonLabel: "Aujourd'hui",
  clockLabelText: (view, time, adapter) => `Choix des ${views3[view]}. ${time === null ? "Aucune heure choisie" : `L'heure choisie est ${adapter.format(time, "fullTime")}`}`,
  hoursClockNumberText: (hours) => `${hours} heures`,
  minutesClockNumberText: (minutes) => `${minutes} minutes`,
  secondsClockNumberText: (seconds) => `${seconds} secondes`,
  openDatePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Choisir la date, la date s\xE9lectionn\xE9e est ${utils.format(utils.date(rawValue), "fullDate")}` : "Choisir la date",
  openTimePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Choisir l'heure, l'heure s\xE9lectionn\xE9e est ${utils.format(utils.date(rawValue), "fullTime")}` : "Choisir l'heure",
  timeTableLabel: "choix de l'heure",
  dateTableLabel: "choix de la date"
};
var frFR = getPickersLocalization(frFRPickers);

// node_modules/@mui/x-date-pickers/locales/huHU.js
var timeViews2 = {
  hours: "\xD3ra",
  minutes: "Perc",
  seconds: "M\xE1sodperc"
};
var pickerViews3 = {
  calendar: "napt\xE1r",
  clock: "\xF3ra"
};
var huHUPickers = {
  previousMonth: "El\u0151z\u0151 h\xF3nap",
  nextMonth: "K\xF6vetkez\u0151 h\xF3nap",
  openPreviousView: "El\u0151z\u0151 n\xE9zet megnyit\xE1sa",
  openNextView: "K\xF6vetkez\u0151 n\xE9zet megnyit\xE1sa",
  calendarViewSwitchingButtonAriaLabel: (view) => view === "year" ? "az \xE9vv\xE1laszt\xF3 m\xE1r nyitva, v\xE1ltson a napt\xE1rn\xE9zetre" : "a napt\xE1rn\xE9zet m\xE1r nyitva, v\xE1ltson az \xE9vv\xE1laszt\xF3ra",
  inputModeToggleButtonAriaLabel: (isKeyboardInputOpen, viewType) => isKeyboardInputOpen ? `sz\xF6veges beviteli n\xE9zet akt\xEDv, v\xE1lt\xE1s ${pickerViews3[viewType]} n\xE9zetre` : `${pickerViews3[viewType]} beviteli n\xE9zet akt\xEDv, v\xE1lt\xE1s sz\xF6veges beviteli n\xE9zetre`,
  start: "Kezd\u0151 d\xE1tum",
  end: "Z\xE1r\xF3 d\xE1tum",
  cancelButtonLabel: "M\xE9gse",
  clearButtonLabel: "T\xF6rl\xE9s",
  okButtonLabel: "OK",
  todayButtonLabel: "Ma",
  datePickerDefaultToolbarTitle: "D\xE1tum kiv\xE1laszt\xE1sa",
  dateTimePickerDefaultToolbarTitle: "D\xE1tum \xE9s id\u0151 kiv\xE1laszt\xE1sa",
  timePickerDefaultToolbarTitle: "Id\u0151 kiv\xE1laszt\xE1sa",
  dateRangePickerDefaultToolbarTitle: "D\xE1tumhat\xE1rok kiv\xE1laszt\xE1sa",
  clockLabelText: (view, time, adapter) => {
    var _timeViews$view;
    return `${(_timeViews$view = timeViews2[view]) != null ? _timeViews$view : view} kiv\xE1laszt\xE1sa. ${time === null ? "Nincs kiv\xE1lasztva id\u0151" : `A kiv\xE1lasztott id\u0151 ${adapter.format(time, "fullTime")}`}`;
  },
  hoursClockNumberText: (hours) => `${hours} ${timeViews2.hours.toLowerCase()}`,
  minutesClockNumberText: (minutes) => `${minutes} ${timeViews2.minutes.toLowerCase()}`,
  secondsClockNumberText: (seconds) => `${seconds}  ${timeViews2.seconds.toLowerCase()}`,
  openDatePickerDialogue: (value, utils) => value !== null && utils.isValid(value) ? `V\xE1lasszon d\xE1tumot, a kiv\xE1lasztott d\xE1tum: ${utils.format(value, "fullDate")}` : "V\xE1lasszon d\xE1tumot",
  openTimePickerDialogue: (value, utils) => value !== null && utils.isValid(value) ? `V\xE1lasszon id\u0151t, a kiv\xE1lasztott id\u0151: ${utils.format(value, "fullTime")}` : "V\xE1lasszon id\u0151t",
  timeTableLabel: "v\xE1lasszon id\u0151t",
  dateTableLabel: "v\xE1lasszon d\xE1tumot"
};
var huHU = getPickersLocalization(huHUPickers);

// node_modules/@mui/x-date-pickers/locales/enUS.js
var enUSPickers = {
  previousMonth: "Previous month",
  nextMonth: "Next month",
  openPreviousView: "open previous view",
  openNextView: "open next view",
  calendarViewSwitchingButtonAriaLabel: (view) => view === "year" ? "year view is open, switch to calendar view" : "calendar view is open, switch to year view",
  inputModeToggleButtonAriaLabel: (isKeyboardInputOpen, viewType) => isKeyboardInputOpen ? `text input view is open, go to ${viewType} view` : `${viewType} view is open, go to text input view`,
  start: "Start",
  end: "End",
  cancelButtonLabel: "Cancel",
  clearButtonLabel: "Clear",
  okButtonLabel: "OK",
  todayButtonLabel: "Today",
  datePickerDefaultToolbarTitle: "Select date",
  dateTimePickerDefaultToolbarTitle: "Select date & time",
  timePickerDefaultToolbarTitle: "Select time",
  dateRangePickerDefaultToolbarTitle: "Select date range",
  clockLabelText: (view, time, adapter) => `Select ${view}. ${time === null ? "No time selected" : `Selected time is ${adapter.format(time, "fullTime")}`}`,
  hoursClockNumberText: (hours) => `${hours} hours`,
  minutesClockNumberText: (minutes) => `${minutes} minutes`,
  secondsClockNumberText: (seconds) => `${seconds} seconds`,
  openDatePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Choose date, selected date is ${utils.format(utils.date(rawValue), "fullDate")}` : "Choose date",
  openTimePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Choose time, selected time is ${utils.format(utils.date(rawValue), "fullTime")}` : "Choose time",
  timeTableLabel: "pick time",
  dateTableLabel: "pick date"
};
var DEFAULT_LOCALE = enUSPickers;
var enUS = getPickersLocalization(enUSPickers);

// node_modules/@mui/x-date-pickers/locales/nbNO.js
var nbNOPickers = {
  previousMonth: "Forrige m\xE5ned",
  nextMonth: "Neste m\xE5ned",
  openPreviousView: "\xE5pne forrige visning",
  openNextView: "\xE5pne neste visning",
  calendarViewSwitchingButtonAriaLabel: (view) => view === "year" ? "\xE5rsvisning er \xE5pen, bytt til kalendervisning" : "kalendervisning er \xE5pen, bytt til \xE5rsvisning",
  start: "Start",
  end: "Slutt",
  cancelButtonLabel: "Avbryt",
  clearButtonLabel: "Fjern",
  okButtonLabel: "OK",
  todayButtonLabel: "I dag",
  clockLabelText: (view, time, adapter) => `Velg ${view}. ${time === null ? "Ingen tid valgt" : `Valgt tid er ${adapter.format(time, "fullTime")}`}`,
  hoursClockNumberText: (hours) => `${hours} timer`,
  minutesClockNumberText: (minutes) => `${minutes} minutter`,
  secondsClockNumberText: (seconds) => `${seconds} sekunder`,
  openDatePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Velg dato, valgt dato er ${utils.format(utils.date(rawValue), "fullDate")}` : "Velg dato",
  openTimePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Velg tid, valgt tid er ${utils.format(utils.date(rawValue), "fullTime")}` : "Velg tid",
  timeTableLabel: "velg tid",
  dateTableLabel: "velg dato"
};
var nbNO = getPickersLocalization(nbNOPickers);

// node_modules/@mui/x-date-pickers/locales/svSE.js
var svSEPickers = {
  previousMonth: "F\xF6reg\xE5ende m\xE5nad",
  nextMonth: "N\xE4sta m\xE5nad",
  openPreviousView: "\xF6ppna f\xF6reg\xE5ende vy",
  openNextView: "\xF6ppna n\xE4sta vy",
  calendarViewSwitchingButtonAriaLabel: (view) => view === "year" ? "\xE5rsvyn \xE4r \xF6ppen, byt till kalendervy" : "kalendervyn \xE4r \xF6ppen, byt till \xE5rsvy",
  start: "Start",
  end: "Slut",
  cancelButtonLabel: "Avbryt",
  clearButtonLabel: "Rensa",
  okButtonLabel: "OK",
  todayButtonLabel: "Idag",
  clockLabelText: (view, time, adapter) => `Select ${view}. ${time === null ? "Ingen tid vald" : `Vald tid \xE4r ${adapter.format(time, "fullTime")}`}`,
  hoursClockNumberText: (hours) => `${hours} timmar`,
  minutesClockNumberText: (minutes) => `${minutes} minuter`,
  secondsClockNumberText: (seconds) => `${seconds} sekunder`,
  openDatePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `V\xE4lj datum, valt datum \xE4r ${utils.format(utils.date(rawValue), "fullDate")}` : "V\xE4lj datum",
  openTimePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `V\xE4lj tid, vald tid \xE4r ${utils.format(utils.date(rawValue), "fullTime")}` : "V\xE4lj tid",
  timeTableLabel: "v\xE4lj tid",
  dateTableLabel: "v\xE4lj datum"
};
var svSE = getPickersLocalization(svSEPickers);

// node_modules/@mui/x-date-pickers/locales/itIT.js
var views4 = {
  hours: "le ore",
  minutes: "i minuti",
  seconds: "i secondi"
};
var itITPickers = {
  previousMonth: "Mese precedente",
  nextMonth: "Mese successivo",
  openPreviousView: "apri la vista precedente",
  openNextView: "apri la vista successiva",
  calendarViewSwitchingButtonAriaLabel: (view) => view === "year" ? "la vista dell'anno \xE8 aperta, passare alla vista del calendario" : "la vista dell'calendario \xE8 aperta, passare alla vista dell'anno",
  inputModeToggleButtonAriaLabel: (isKeyboardInputOpen, viewType) => isKeyboardInputOpen ? `la vista del campo di testo \xE8 aperta, passare alla vista ${viewType}` : `la vista aperta \xE8: ${viewType}, vai alla vista del campo di testo`,
  start: "Inizio",
  end: "Fine",
  cancelButtonLabel: "Cancellare",
  clearButtonLabel: "Sgomberare",
  okButtonLabel: "OK",
  todayButtonLabel: "Oggi",
  datePickerDefaultToolbarTitle: "Seleziona data",
  dateTimePickerDefaultToolbarTitle: "Seleziona data e orario",
  timePickerDefaultToolbarTitle: "Seleziona orario",
  dateRangePickerDefaultToolbarTitle: "Seleziona intervallo di date",
  clockLabelText: (view, time, adapter) => `Seleziona ${views4[view]}. ${time === null ? "Nessun orario selezionato" : `L'ora selezionata \xE8 ${adapter.format(time, "fullTime")}`}`,
  hoursClockNumberText: (hours) => `${hours} ore`,
  minutesClockNumberText: (minutes) => `${minutes} minuti`,
  secondsClockNumberText: (seconds) => `${seconds} secondi`,
  openDatePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Scegli la data, la data selezionata \xE8 ${utils.format(utils.date(rawValue), "fullDate")}` : "Scegli la data",
  openTimePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Scegli l'ora, l'ora selezionata \xE8 ${utils.format(utils.date(rawValue), "fullTime")}` : "Scegli l'ora",
  timeTableLabel: "scegli un'ora",
  dateTableLabel: "scegli una data"
};
var itIT = getPickersLocalization(itITPickers);

// node_modules/@mui/x-date-pickers/locales/zhCN.js
var views5 = {
  hours: "\u5C0F\u65F6",
  minutes: "\u5206\u949F",
  seconds: "\u79D2"
};
var zhCNPickers = {
  previousMonth: "\u4E0A\u4E2A\u6708",
  nextMonth: "\u4E0B\u4E2A\u6708",
  openPreviousView: "\u524D\u4E00\u4E2A\u89C6\u56FE",
  openNextView: "\u4E0B\u4E00\u4E2A\u89C6\u56FE",
  calendarViewSwitchingButtonAriaLabel: (view) => view === "year" ? "\u5E74\u89C6\u56FE\u5DF2\u6253\u5F00\uFF0C\u5207\u6362\u4E3A\u65E5\u5386\u89C6\u56FE" : "\u65E5\u5386\u89C6\u56FE\u5DF2\u6253\u5F00\uFF0C\u5207\u6362\u4E3A\u5E74\u89C6\u56FE",
  start: "\u5F00\u59CB",
  end: "\u7ED3\u675F",
  cancelButtonLabel: "\u53D6\u6D88",
  clearButtonLabel: "\u6E05\u9664",
  okButtonLabel: "\u786E\u8BA4",
  todayButtonLabel: "\u4ECA\u5929",
  clockLabelText: (view, time, adapter) => `Select ${views5[view]}. ${time === null ? "\u672A\u9009\u62E9\u65F6\u95F4" : `\u5DF2\u9009\u62E9${adapter.format(time, "fullTime")}`}`,
  hoursClockNumberText: (hours) => `${hours}\u5C0F\u65F6`,
  minutesClockNumberText: (minutes) => `${minutes}\u5206\u949F`,
  secondsClockNumberText: (seconds) => `${seconds}\u79D2`,
  openDatePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `\u9009\u62E9\u65E5\u671F\uFF0C\u5DF2\u9009\u62E9${utils.format(utils.date(rawValue), "fullDate")}` : "\u9009\u62E9\u65E5\u671F",
  openTimePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `\u9009\u62E9\u65F6\u95F4\uFF0C\u5DF2\u9009\u62E9${utils.format(utils.date(rawValue), "fullTime")}` : "\u9009\u62E9\u65F6\u95F4",
  timeTableLabel: "\u9009\u62E9\u65F6\u95F4",
  dateTableLabel: "\u9009\u62E9\u65E5\u671F"
};
var zhCN = getPickersLocalization(zhCNPickers);

// node_modules/@mui/x-date-pickers/locales/koKR.js
var views6 = {
  hours: "\uC2DC\uAC04\uC744",
  minutes: "\uBD84\uC744",
  seconds: "\uCD08\uB97C"
};
var koKRPickers = {
  previousMonth: "\uC774\uC804 \uB2EC",
  nextMonth: "\uB2E4\uC74C \uB2EC",
  openPreviousView: "\uC774\uC804 \uD654\uBA74 \uBCF4\uAE30",
  openNextView: "\uB2E4\uC74C \uD654\uBA74 \uBCF4\uAE30",
  calendarViewSwitchingButtonAriaLabel: (view) => view === "year" ? "\uC5F0\uB3C4 \uC120\uD0DD \uD654\uBA74\uC5D0\uC11C \uB2EC\uB825 \uD654\uBA74\uC73C\uB85C \uC804\uD658\uD558\uAE30" : "\uB2EC\uB825 \uD654\uBA74\uC5D0\uC11C \uC5F0\uB3C4 \uC120\uD0DD \uD654\uBA74\uC73C\uB85C \uC804\uD658\uD558\uAE30",
  inputModeToggleButtonAriaLabel: (isKeyboardInputOpen, viewType) => isKeyboardInputOpen ? `\uD14D\uC2A4\uD2B8 \uC785\uB825 \uD654\uBA74\uC5D0\uC11C ${viewType} \uD654\uBA74\uC73C\uB85C \uC804\uD658\uD558\uAE30` : `${viewType} \uD654\uBA74\uC5D0\uC11C \uD14D\uC2A4\uD2B8 \uC785\uB825 \uD654\uBA74\uC73C\uB85C \uC804\uD658\uD558\uAE30`,
  start: "\uC2DC\uC791",
  end: "\uC885\uB8CC",
  cancelButtonLabel: "\uCDE8\uC18C",
  clearButtonLabel: "\uCD08\uAE30\uD654",
  okButtonLabel: "\uD655\uC778",
  todayButtonLabel: "\uC624\uB298",
  datePickerDefaultToolbarTitle: "\uB0A0\uC9DC \uC120\uD0DD\uD558\uAE30",
  dateTimePickerDefaultToolbarTitle: "\uB0A0\uC9DC & \uC2DC\uAC04 \uC120\uD0DD\uD558\uAE30",
  timePickerDefaultToolbarTitle: "\uC2DC\uAC04 \uC120\uD0DD\uD558\uAE30",
  dateRangePickerDefaultToolbarTitle: "\uB0A0\uC9DC \uBC94\uC704 \uC120\uD0DD\uD558\uAE30",
  clockLabelText: (view, time, adapter) => `${views6[view]} \uC120\uD0DD\uD558\uC138\uC694. ${time === null ? "\uC2DC\uAC04\uC744 \uC120\uD0DD\uD558\uC9C0 \uC54A\uC558\uC2B5\uB2C8\uB2E4." : `\uD604\uC7AC \uC120\uD0DD\uB41C \uC2DC\uAC04\uC740 ${adapter.format(time, "fullTime")}\uC785\uB2C8\uB2E4.`}`,
  hoursClockNumberText: (hours) => `${hours}\uC2DC\uAC04`,
  minutesClockNumberText: (minutes) => `${minutes}\uBD84`,
  secondsClockNumberText: (seconds) => `${seconds}\uCD08`,
  openDatePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `\uB0A0\uC9DC\uB97C \uC120\uD0DD\uD558\uC138\uC694. \uD604\uC7AC \uC120\uD0DD\uB41C \uB0A0\uC9DC\uB294 ${utils.format(utils.date(rawValue), "fullDate")}\uC785\uB2C8\uB2E4.` : "\uB0A0\uC9DC\uB97C \uC120\uD0DD\uD558\uC138\uC694",
  openTimePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `\uC2DC\uAC04\uC744 \uC120\uD0DD\uD558\uC138\uC694. \uD604\uC7AC \uC120\uD0DD\uB41C \uC2DC\uAC04\uC740 ${utils.format(utils.date(rawValue), "fullTime")}\uC785\uB2C8\uB2E4.` : "\uC2DC\uAC04\uC744 \uC120\uD0DD\uD558\uC138\uC694",
  timeTableLabel: "\uC120\uD0DD\uD55C \uC2DC\uAC04",
  dateTableLabel: "\uC120\uD0DD\uD55C \uB0A0\uC9DC"
};
var koKR = getPickersLocalization(koKRPickers);

// node_modules/@mui/x-date-pickers/locales/isIS.js
var isISPickers = {
  previousMonth: "Fyrri m\xE1nu\xF0ur",
  nextMonth: "N\xE6sti m\xE1nu\xF0ur",
  openPreviousView: "opna fyrri sko\xF0un",
  openNextView: "opna n\xE6stu sko\xF0un",
  calendarViewSwitchingButtonAriaLabel: (view) => view === "year" ? "\xE1rssko\xF0un er opin, skipta yfir \xED dagatalssko\xF0un" : "dagatalssko\xF0un er opin, skipta yfir \xED \xE1rssko\xF0un",
  inputModeToggleButtonAriaLabel: (isKeyboardInputOpen, viewType) => {
    const viewTypeTranslated = viewType === "calendar" ? "dagatals" : "klukku";
    return isKeyboardInputOpen ? `textainnsl\xE1ttur er opinn, fara \xED ${viewTypeTranslated}sko\xF0un` : `${viewTypeTranslated}sko\xF0un er opin, opna fyrir textainnsl\xE1tt`;
  },
  start: "Upphaf",
  end: "Endir",
  cancelButtonLabel: "H\xE6tta vi\xF0",
  clearButtonLabel: "Hreinsa",
  okButtonLabel: "OK",
  todayButtonLabel: "\xCD dag",
  datePickerDefaultToolbarTitle: "Velja dagsetningu",
  dateTimePickerDefaultToolbarTitle: "Velja dagsetningu og t\xEDma",
  timePickerDefaultToolbarTitle: "Velja t\xEDma",
  dateRangePickerDefaultToolbarTitle: "Velja t\xEDmabil",
  clockLabelText: (view, time, adapter) => `Select ${view}. ${time === null ? "Enginn t\xEDmi valinn" : `Valinn t\xEDmi er ${adapter.format(time, "fullTime")}`}`,
  hoursClockNumberText: (hours) => `${hours} klukkustundir`,
  minutesClockNumberText: (minutes) => `${minutes} m\xEDn\xFAtur`,
  secondsClockNumberText: (seconds) => `${seconds} sek\xFAndur`,
  openDatePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Velja dagsetningu, valin dagsetning er ${utils.format(utils.date(rawValue), "fullDate")}` : "Velja dagsetningu",
  openTimePickerDialogue: (rawValue, utils) => rawValue && utils.isValid(utils.date(rawValue)) ? `Velja t\xEDma, valinn t\xEDmi er ${utils.format(utils.date(rawValue), "fullTime")}` : "Velja t\xEDma",
  timeTableLabel: "velja t\xEDma",
  dateTableLabel: "velja dagsetningu"
};
var isIS = getPickersLocalization(isISPickers);

// node_modules/@mui/x-date-pickers/locales/jaJP.js
var clockViews2 = {
  hours: "\u6642\u9593",
  minutes: "\u5206",
  seconds: "\u79D2"
};
var pickerViews4 = {
  calendar: "\u30AB\u30EC\u30F3\u30C0\u30FC\u8868\u793A",
  clock: "\u6642\u8A08\u8868\u793A"
};
var jaJPPickers = {
  previousMonth: "\u5148\u6708",
  nextMonth: "\u6765\u6708",
  openPreviousView: "\u524D\u306E\u8868\u793A\u3092\u958B\u304F",
  openNextView: "\u6B21\u306E\u8868\u793A\u3092\u958B\u304F",
  calendarViewSwitchingButtonAriaLabel: (view) => view === "year" ? "\u5E74\u9078\u629E\u8868\u793A\u304B\u3089\u30AB\u30EC\u30F3\u30C0\u30FC\u8868\u793A\u306B\u5207\u308A\u66FF\u3048\u308B" : "\u30AB\u30EC\u30F3\u30C0\u30FC\u8868\u793A\u304B\u3089\u5E74\u9078\u629E\u8868\u793A\u306B\u5207\u308A\u66FF\u3048\u308B",
  inputModeToggleButtonAriaLabel: (isKeyboardInputOpen, viewType) => isKeyboardInputOpen ? `\u30C6\u30AD\u30B9\u30C8\u5165\u529B\u8868\u793A\u304B\u3089${pickerViews4[viewType]}\u306B\u5207\u308A\u66FF\u3048\u308B` : `${pickerViews4[viewType]}\u304B\u3089\u30C6\u30AD\u30B9\u30C8\u5165\u529B\u8868\u793A\u306B\u5207\u308A\u66FF\u3048\u308B`,
  start: "\u958B\u59CB",
  end: "\u7D42\u4E86",
  cancelButtonLabel: "\u30AD\u30E3\u30F3\u30BB\u30EB",
  clearButtonLabel: "\u30AF\u30EA\u30A2",
  okButtonLabel: "\u78BA\u5B9A",
  todayButtonLabel: "\u4ECA\u65E5",
  datePickerDefaultToolbarTitle: "\u65E5\u4ED8\u3092\u9078\u629E",
  dateTimePickerDefaultToolbarTitle: "\u65E5\u6642\u3092\u9078\u629E",
  timePickerDefaultToolbarTitle: "\u6642\u9593\u3092\u9078\u629E",
  dateRangePickerDefaultToolbarTitle: "\u65E5\u4ED8\u306E\u7BC4\u56F2\u3092\u9078\u629E",
  clockLabelText: (view, time, adapter) => {
    var _clockViews$view;
    return `${(_clockViews$view = clockViews2[view]) != null ? _clockViews$view : view}\u3092\u9078\u629E\u3057\u3066\u304F\u3060\u3055\u3044 ${time === null ? "\u6642\u9593\u304C\u9078\u629E\u3055\u308C\u3066\u3044\u307E\u305B\u3093" : `\u9078\u629E\u3057\u305F\u6642\u9593\u306F ${adapter.format(time, "fullTime")} \u3067\u3059`}`;
  },
  hoursClockNumberText: (hours) => `${hours} ${clockViews2.hours}`,
  minutesClockNumberText: (minutes) => `${minutes} ${clockViews2.minutes}`,
  secondsClockNumberText: (seconds) => `${seconds} ${clockViews2.seconds}`,
  openDatePickerDialogue: (value, utils) => value !== null && utils.isValid(value) ? `\u65E5\u4ED8\u3092\u9078\u629E\u3057\u3066\u304F\u3060\u3055\u3044\u3002\u9078\u629E\u3057\u305F\u65E5\u4ED8\u306F ${utils.format(value, "fullDate")} \u3067\u3059` : "\u65E5\u4ED8\u3092\u9078\u629E\u3057\u3066\u304F\u3060\u3055\u3044",
  openTimePickerDialogue: (value, utils) => value !== null && utils.isValid(value) ? `\u6642\u9593\u3092\u9078\u629E\u3057\u3066\u304F\u3060\u3055\u3044\u3002\u9078\u629E\u3057\u305F\u6642\u9593\u306F ${utils.format(value, "fullTime")} \u3067\u3059` : "\u6642\u9593\u3092\u9078\u629E\u3057\u3066\u304F\u3060\u3055\u3044",
  timeTableLabel: "\u6642\u9593\u3092\u9078\u629E",
  dateTableLabel: "\u65E5\u4ED8\u3092\u9078\u629E"
};
var jaJP = getPickersLocalization(jaJPPickers);

// node_modules/@mui/x-date-pickers/locales/ukUA.js
var ukUAPickers = {
  previousMonth: "\u041F\u043E\u043F\u0435\u0440\u0435\u0434\u043D\u0456\u0439 \u043C\u0456\u0441\u044F\u0446\u044C",
  nextMonth: "\u041D\u0430\u0441\u0442\u0443\u043F\u043D\u0438\u0439 \u043C\u0456\u0441\u044F\u0446\u044C",
  openPreviousView: "\u0432\u0456\u0434\u043A\u0440\u0438\u0442\u0438 \u043F\u043E\u043F\u0435\u0440\u0435\u0434\u043D\u0456\u0439 \u0432\u0438\u0433\u043B\u044F\u0434",
  openNextView: "\u0432\u0456\u0434\u043A\u0440\u0438\u0442\u0438 \u043D\u0430\u0441\u0442\u0443\u043F\u043D\u0438\u0439 \u0432\u0438\u0433\u043B\u044F\u0434",
  calendarViewSwitchingButtonAriaLabel: (view) => view === "year" ? "\u0440\u0456\u0447\u043D\u0438\u0439 \u0432\u0438\u0433\u043B\u044F\u0434 \u0432\u0456\u0434\u043A\u0440\u0438\u0442\u043E, \u043F\u0435\u0440\u0435\u0439\u0442\u0438 \u0434\u043E \u043A\u0430\u043B\u0435\u043D\u0434\u0430\u0440\u043D\u043E\u0433\u043E \u0432\u0438\u0433\u043B\u044F\u0434\u0443" : "\u043A\u0430\u043B\u0435\u043D\u0434\u0430\u0440\u043D\u0438\u0439 \u0432\u0438\u0433\u043B\u044F\u0434 \u0432\u0456\u0434\u043A\u0440\u0438\u0442\u043E, \u043F\u0435\u0440\u0435\u0439\u0442\u0438 \u0434\u043E \u0440\u0456\u0447\u043D\u043E\u0433\u043E \u0432\u0438\u0433\u043B\u044F\u0434\u0443",
  inputModeToggleButtonAriaLabel: (isKeyboardInputOpen, viewType) => isKeyboardInputOpen ? `\u0442\u0435\u043A\u0441\u0442\u043E\u0432\u0435 \u043F\u043E\u043B\u0435 \u0432\u0456\u0434\u043A\u0440\u0438\u0442\u0435, \u043F\u0435\u0440\u0435\u0439\u0442\u0438 \u0434\u043E  ${viewType} \u0432\u0438\u0433\u043B\u044F\u0434\u0443` : `${viewType} \u0432\u0438\u0433\u043B\u044F\u0434 \u043D\u0430\u0440\u0430\u0437\u0456 \u0432\u0456\u0434\u043A\u0440\u0438\u0442\u043E, \u043F\u0435\u0440\u0435\u0439\u0442\u0438 \u0434\u043E \u0442\u0435\u043A\u0441\u0442\u043E\u0432\u043E\u0433\u043E \u043F\u043E\u043B\u044F`,
  start: "\u041F\u043E\u0447\u0430\u0442\u043E\u043A",
  end: "\u041A\u0456\u043D\u0435\u0446\u044C",
  cancelButtonLabel: "\u0412\u0456\u0434\u043C\u0456\u043D\u0430",
  clearButtonLabel: "\u041E\u0447\u0438\u0441\u0442\u0438\u0442\u0438",
  okButtonLabel: "OK",
  todayButtonLabel: "\u0421\u044C\u043E\u0433\u043E\u0434\u043D\u0456",
  datePickerDefaultToolbarTitle: "\u0412\u0438\u0431\u0440\u0430\u0442\u0438 \u0434\u0430\u0442\u0443",
  dateTimePickerDefaultToolbarTitle: "\u0412\u0438\u0431\u0440\u0430\u0442\u0438 \u0434\u0430\u0442\u0443 \u0456 \u0447\u0430\u0441",
  timePickerDefaultToolbarTitle: "\u0412\u0438\u0431\u0440\u0430\u0442\u0438 \u0447\u0430\u0441",
  dateRangePickerDefaultToolbarTitle: "\u0412\u0438\u0431\u0440\u0430\u0442\u0438 \u043A\u0430\u043B\u0435\u043D\u0434\u0430\u0440\u043D\u0438\u0439 \u043F\u0435\u0440\u0456\u043E\u0434",
  clockLabelText: (view, time, adapter) => `Select ${view}. ${time === null ? "\u0427\u0430\u0441 \u043D\u0435 \u0432\u0438\u0431\u0440\u0430\u043D\u0438\u0439" : `\u0412\u0438\u0431\u0440\u0430\u043D\u043E \u0447\u0430\u0441 ${adapter.format(time, "fullTime")}`}`,
  hoursClockNumberText: (hours) => `${hours} \u0433\u043E\u0434\u0438\u043D`,
  minutesClockNumberText: (minutes) => `${minutes} \u0445\u0432\u0438\u043B\u0438\u043D`,
  secondsClockNumberText: (seconds) => `${seconds} \u0441\u0435\u043A\u0443\u043D\u0434`,
  openDatePickerDialogue: (value, utils) => value !== null && utils.isValid(value) ? `\u041E\u0431\u0435\u0440\u0456\u0442\u044C \u0434\u0430\u0442\u0443, \u043E\u0431\u0440\u0430\u043D\u0430 \u0434\u0430\u0442\u0430  ${utils.format(value, "fullDate")}` : "\u041E\u0431\u0435\u0440\u0456\u0442\u044C \u0434\u0430\u0442\u0443",
  openTimePickerDialogue: (value, utils) => value !== null && utils.isValid(value) ? `\u041E\u0431\u0435\u0440\u0456\u0442\u044C \u0447\u0430\u0441, \u043E\u0431\u0440\u0430\u043D\u0438\u0439 \u0447\u0430\u0441  ${utils.format(value, "fullTime")}` : "\u041E\u0431\u0435\u0440\u0456\u0442\u044C \u0447\u0430\u0441",
  timeTableLabel: "\u043E\u0431\u0435\u0440\u0456\u0442\u044C \u0447\u0430\u0441",
  dateTableLabel: "\u043E\u0431\u0435\u0440\u0456\u0442\u044C \u0434\u0430\u0442\u0443"
};
var ukUA = getPickersLocalization(ukUAPickers);

// node_modules/@mui/x-date-pickers/locales/urPK.js
var urPKPickers = {
  previousMonth: "\u067E\u0686\u06BE\u0644\u0627 \u0645\u06C1\u06CC\u0646\u06C1",
  nextMonth: "\u0627\u06AF\u0644\u0627 \u0645\u06C1\u06CC\u0646\u06C1",
  openPreviousView: "\u067E\u0686\u06BE\u0644\u0627 \u0648\u06CC\u0648 \u06A9\u06BE\u0648\u0644\u06CC\u06BA",
  openNextView: "\u0627\u06AF\u0644\u0627 \u0648\u06CC\u0648 \u06A9\u06BE\u0648\u0644\u06CC\u06BA",
  calendarViewSwitchingButtonAriaLabel: (view) => view === "year" ? "\u0633\u0627\u0644 \u0648\u0627\u0644\u0627 \u0648\u06CC\u0648 \u06A9\u06BE\u0644\u0627 \u06C1\u06D2\u06D4 \u06A9\u06CC\u0644\u0646\u0688\u0631 \u0648\u0627\u0644\u0627 \u0648\u06CC\u0648 \u06A9\u06BE\u0648\u0644\u06CC\u06BA" : "\u06A9\u06CC\u0644\u0646\u0688\u0631 \u0648\u0627\u0644\u0627 \u0648\u06CC\u0648 \u06A9\u06BE\u0644\u0627 \u06C1\u06D2\u06D4 \u0633\u0627\u0644 \u0648\u0627\u0644\u0627 \u0648\u06CC\u0648 \u06A9\u06BE\u0648\u0644\u06CC\u06BA",
  inputModeToggleButtonAriaLabel: (isKeyboardInputOpen, viewType) => isKeyboardInputOpen ? `\u060C\u0679\u06CC\u06A9\u0633\u0679 \u0648\u06CC\u0648 \u06A9\u06BE\u0644\u0627 \u06C1\u06D2 ${viewType} \u0648\u06CC\u0648 \u06A9\u06BE\u0648\u0644\u06CC\u06BA` : `${viewType} \u0648\u06CC\u0648 \u06A9\u06BE\u0644\u0627 \u06C1\u06D2\u060C \u0679\u06CC\u06A9\u0633\u0679 \u0648\u06CC\u0648 \u06A9\u06BE\u0648\u0644\u06CC\u06BA`,
  start: "\u0634\u0631\u0648\u0639",
  end: "\u062E\u062A\u0645",
  cancelButtonLabel: "\u06A9\u06CC\u0646\u0633\u0644",
  clearButtonLabel: "\u06A9\u0644\u0626\u06CC\u0631",
  okButtonLabel: "\u0627\u0648\u06A9\u06D2",
  todayButtonLabel: "\u0627\u0653\u062C",
  datePickerDefaultToolbarTitle: "\u062A\u0627\u0631\u06CC\u062E \u0645\u0646\u062A\u062E\u0628 \u06A9\u0631\u06CC\u06BA",
  dateTimePickerDefaultToolbarTitle: "\u062A\u0627\u0631\u06CC\u062E \u0627\u0648\u0631 \u0648\u0642\u062A \u0645\u0646\u062A\u062E\u0628 \u06A9\u0631\u06CC\u06BA",
  timePickerDefaultToolbarTitle: "\u0648\u0642\u062A \u0645\u0646\u062A\u062E\u0628 \u06A9\u0631\u06CC\u06BA",
  dateRangePickerDefaultToolbarTitle: "\u062A\u0627\u0631\u06CC\u062E\u0648\u06BA \u06A9\u06CC \u0631\u06CC\u0646\u062C \u0645\u0646\u062A\u062E\u0628 \u06A9\u0631\u06CC\u06BA",
  clockLabelText: (view, time, adapter) => `${view} \u0645\u0646\u062A\u062E\u0628 \u06A9\u0631\u06CC\u06BA ${time === null ? "\u06A9\u0648\u0626\u06CC \u0648\u0642\u062A \u0645\u0646\u062A\u062E\u0628 \u0646\u06C1\u06CC\u06BA" : `\u0645\u0646\u062A\u062E\u0628 \u0648\u0642\u062A \u06C1\u06D2 ${adapter.format(time, "fullTime")}`}`,
  hoursClockNumberText: (hours) => `${hours} \u06AF\u06BE\u0646\u0679\u06D2`,
  minutesClockNumberText: (minutes) => `${minutes} \u0645\u0646\u0679`,
  secondsClockNumberText: (seconds) => `${seconds} \u0633\u06CC\u06A9\u0646\u0688`,
  openDatePickerDialogue: (value, utils) => value !== null && utils.isValid(value) ? `\u062A\u0627\u0631\u06CC\u062E \u0645\u0646\u062A\u062E\u0628 \u06A9\u0631\u06CC\u06BA\u060C \u0645\u0646\u062A\u062E\u0628 \u0634\u062F\u06C1 \u062A\u0627\u0631\u06CC\u062E \u06C1\u06D2 ${utils.format(value, "fullDate")}` : "\u062A\u0627\u0631\u06CC\u062E \u0645\u0646\u062A\u062E\u0628 \u06A9\u0631\u06CC\u06BA",
  openTimePickerDialogue: (value, utils) => value !== null && utils.isValid(value) ? `\u0648\u0642\u062A \u0645\u0646\u062A\u062E\u0628 \u06A9\u0631\u06CC\u06BA\u060C \u0645\u0646\u062A\u062E\u0628 \u0634\u062F\u06C1 \u0648\u0642\u062A \u06C1\u06D2 ${utils.format(value, "fullTime")}` : "\u0648\u0642\u062A \u0645\u0646\u062A\u062E\u0628 \u06A9\u0631\u06CC\u06BA",
  timeTableLabel: "\u0648\u0642\u062A \u0645\u0646\u062A\u062E\u0628 \u06A9\u0631\u06CC\u06BA",
  dateTableLabel: "\u062A\u0627\u0631\u06CC\u062E \u0645\u0646\u062A\u062E\u0628 \u06A9\u0631\u06CC\u06BA"
};
var urPK = getPickersLocalization(urPKPickers);

// node_modules/@mui/x-date-pickers/locales/beBY.js
var views7 = {
  hours: "\u0433\u0430\u0434\u0437\u0456\u043D\u044B",
  minutes: "\u0445\u0432\u0456\u043B\u0456\u043D\u044B",
  seconds: "\u0441\u0435\u043A\u0443\u043D\u0434\u044B",
  calendar: "\u043A\u0430\u043B\u0435\u043D\u0434\u0430\u0440\u0430",
  clock: "\u0447\u0430\u0441\u0443"
};
var beBYPickers = {
  previousMonth: "\u041F\u0430\u043F\u044F\u0440\u044D\u0434\u043D\u0456 \u043C\u0435\u0441\u044F\u0446",
  nextMonth: "\u041D\u0430\u0441\u0442\u0443\u043F\u043D\u044B \u043C\u0435\u0441\u044F\u0446",
  openPreviousView: "\u0430\u0434\u043A\u0440\u044B\u0446\u044C \u043F\u0430\u043F\u044F\u0440\u044D\u0434\u043D\u0456 \u0432\u044B\u0433\u043B\u044F\u0434",
  openNextView: "\u0430\u0434\u043A\u0440\u044B\u0446\u044C \u043D\u0430\u0441\u0442\u0443\u043F\u043D\u044B \u0432\u044B\u0433\u043B\u044F\u0434",
  calendarViewSwitchingButtonAriaLabel: (view) => view === "year" ? "\u0433\u0430\u0434\u0430\u0432\u044B \u0432\u044B\u0433\u043B\u044F\u0434 \u0430\u0434\u043A\u0440\u044B\u0442\u044B, \u043F\u0435\u0440\u0430\u0439\u0441\u0446\u0456 \u0434\u0430 \u043A\u0430\u043B\u044F\u043D\u0434\u0430\u0440\u043D\u0430\u0433\u0430 \u0432\u044B\u0433\u043B\u044F\u0434\u0443" : "\u043A\u0430\u043B\u044F\u043D\u0434\u0430\u0440\u043D\u044B \u0432\u044B\u0433\u043B\u044F\u0434 \u0430\u0434\u043A\u0440\u044B\u0442\u044B, \u043F\u0435\u0440\u0430\u0439\u0441\u0446\u0456 \u0434\u0430 \u0433\u0430\u0434\u0430\u0432\u043E\u0433\u0430 \u0432\u044B\u0433\u043B\u044F\u0434\u0443",
  inputModeToggleButtonAriaLabel: (isKeyboardInputOpen, viewType) => isKeyboardInputOpen ? `\u0442\u044D\u043A\u0441\u0442\u0430\u0432\u0430\u0435 \u043F\u043E\u043B\u0435 \u0430\u0434\u043A\u0440\u044B\u0442\u0430, \u043F\u0435\u0440\u0430\u0439\u0441\u0446\u0456 \u0434\u0430 \u0432\u044B\u0433\u043B\u044F\u0434\u0443 ${views7[viewType]}` : `\u0412\u044B\u0433\u043B\u044F\u0434 ${views7[viewType]} \u0437\u0430\u0440\u0430\u0437 \u0430\u0434\u043A\u0440\u044B\u0442\u044B, \u043F\u0435\u0440\u0430\u0439\u0441\u0446\u0456 \u0434\u0430 \u0442\u044D\u043A\u0441\u0442\u0430\u0432\u0430\u0433\u0430 \u043F\u043E\u043B\u044F`,
  start: "\u041F\u0430\u0447\u0430\u0442\u0430\u043A",
  end: "\u041A\u0430\u043D\u0435\u0446",
  cancelButtonLabel: "\u0410\u0434\u043C\u0435\u043D\u0430",
  clearButtonLabel: "\u0410\u0447\u044B\u0441\u0446\u0456\u0446\u044C",
  okButtonLabel: "OK",
  todayButtonLabel: "\u0421\u0451\u043D\u043D\u044F",
  datePickerDefaultToolbarTitle: "\u0410\u0431\u0440\u0430\u0446\u044C \u0434\u0430\u0442\u0443",
  dateTimePickerDefaultToolbarTitle: "\u0410\u0431\u0440\u0430\u0446\u044C \u0434\u0430\u0442\u0443 \u0456 \u0447\u0430\u0441",
  timePickerDefaultToolbarTitle: "\u0410\u0431\u0440\u0430\u0446\u044C \u0447\u0430\u0441",
  dateRangePickerDefaultToolbarTitle: "\u0410\u0431\u0440\u0430\u0446\u044C \u043A\u0430\u043B\u044F\u043D\u0434\u0430\u0440\u043D\u044B \u043F\u0435\u0440\u044B\u044F\u0434",
  clockLabelText: (view, time, adapter) => `\u0410\u0431\u044F\u0440\u044B\u0446\u0435 ${views7[view]}. ${time === null ? "\u0427\u0430\u0441 \u043D\u0435 \u0430\u0431\u0440\u0430\u043D\u044B" : `\u0410\u0431\u0440\u0430\u043D\u044B \u0447\u0430\u0441 ${adapter.format(time, "fullTime")}`}`,
  hoursClockNumberText: (hours) => `${hours} \u0433\u0430\u0434\u0437\u0456\u043D`,
  minutesClockNumberText: (minutes) => `${minutes} \u0445\u0432\u0456\u043B\u0456\u043D`,
  secondsClockNumberText: (seconds) => `${seconds} \u0441\u0435\u043A\u0443\u043D\u0434`,
  openDatePickerDialogue: (value, utils) => value !== null && utils.isValid(value) ? `\u0410\u0431\u0440\u0430\u0446\u044C \u0434\u0430\u0442\u0443, \u0430\u0431\u0440\u0430\u043D\u0430 \u0434\u0430\u0442\u0430  ${utils.format(value, "fullDate")}` : "\u0410\u0431\u0440\u0430\u0446\u044C \u0434\u0430\u0442\u0443",
  openTimePickerDialogue: (value, utils) => value !== null && utils.isValid(value) ? `\u0410\u0431\u0440\u0430\u0446\u044C \u0447\u0430\u0441, \u0430\u0431\u0440\u044B\u043D\u044B \u0447\u0430\u0441  ${utils.format(value, "fullTime")}` : "\u0410\u0431\u0440\u0430\u0446\u044C \u0447\u0430\u0441",
  timeTableLabel: "\u0430\u0431\u0440\u0430\u0446\u044C \u0447\u0430\u0441",
  dateTableLabel: "\u0430\u0431\u0440\u0430\u0446\u044C \u0434\u0430\u0442\u0443"
};
var beBY = getPickersLocalization(beBYPickers);

// node_modules/@mui/x-date-pickers/locales/ruRU.js
var timeViews3 = {
  hours: "\u0447\u0430\u0441\u044B",
  minutes: "\u043C\u0438\u043D\u0443\u0442\u044B",
  seconds: "\u0441\u0435\u043A\u0443\u043D\u0434\u044B"
};
var viewTypes = {
  calendar: "\u043A\u0430\u043B\u0435\u043D\u0434\u0430\u0440\u043D\u044B\u0439",
  clock: "\u0447\u0430\u0441\u043E\u0432\u043E\u0439"
};
var ruRUPickers = {
  previousMonth: "\u041F\u0440\u0435\u0434\u044B\u0434\u0443\u0449\u0438\u0439 \u043C\u0435\u0441\u044F\u0446",
  nextMonth: "\u0421\u043B\u0435\u0434\u0443\u044E\u0449\u0438\u0439 \u043C\u0435\u0441\u044F\u0446",
  openPreviousView: "\u043E\u0442\u043A\u0440\u044B\u0442\u044C \u043F\u0440\u0435\u0434\u044B\u0434\u0443\u0449\u0438\u0439 \u0432\u0438\u0434",
  openNextView: "\u043E\u0442\u043A\u0440\u044B\u0442\u044C \u0441\u043B\u0435\u0434\u0443\u044E\u0449\u0438\u0439 \u0432\u0438\u0434",
  calendarViewSwitchingButtonAriaLabel: (view) => view === "year" ? "\u043E\u0442\u043A\u0440\u044B\u0442 \u0433\u043E\u0434\u043E\u0432\u043E\u0439 \u0432\u0438\u0434, \u043F\u0435\u0440\u0435\u043A\u043B\u044E\u0447\u0438\u0442\u044C \u043D\u0430 \u043A\u0430\u043B\u0435\u043D\u0434\u0430\u0440\u043D\u044B\u0439 \u0432\u0438\u0434" : "\u043E\u0442\u043A\u0440\u044B\u0442 \u043A\u0430\u043B\u0435\u043D\u0434\u0430\u0440\u043D\u044B\u0439 \u0432\u0438\u0434, \u043F\u0435\u0440\u0435\u043A\u043B\u044E\u0447\u0438\u0442\u044C \u043D\u0430 \u0433\u043E\u0434\u043E\u0432\u043E\u0439 \u0432\u0438\u0434",
  inputModeToggleButtonAriaLabel: (isKeyboardInputOpen, viewType) => isKeyboardInputOpen ? `\u041E\u0442\u043A\u0440\u044B\u0442 \u0442\u0435\u043A\u0441\u0442\u043E\u0432\u044B\u0439 \u0432\u0438\u0434, \u043F\u0435\u0440\u0435\u0439\u0442\u0438 \u043D\u0430 ${viewTypes[viewType]} \u0432\u0438\u0434` : `\u041E\u0442\u043A\u0440\u044B\u0442 ${viewTypes[viewType]} \u0432\u0438\u0434, \u043F\u0435\u0440\u0435\u0439\u0442\u0438 \u043D\u0430 \u0442\u0435\u043A\u0441\u0442\u043E\u0432\u044B\u0439 \u0432\u0438\u0434`,
  start: "\u041D\u0430\u0447\u0430\u043B\u043E",
  end: "\u041A\u043E\u043D\u0435\u0446",
  cancelButtonLabel: "\u041E\u0442\u043C\u0435\u043D\u0430",
  clearButtonLabel: "\u041E\u0447\u0438\u0441\u0442\u0438\u0442\u044C",
  okButtonLabel: "\u041E\u043A",
  todayButtonLabel: "\u0421\u0435\u0433\u043E\u0434\u043D\u044F",
  datePickerDefaultToolbarTitle: "\u0412\u044B\u0431\u0440\u0430\u0442\u044C \u0434\u0430\u0442\u0443",
  dateTimePickerDefaultToolbarTitle: "\u0412\u044B\u0431\u0440\u0430\u0442\u044C \u0434\u0430\u0442\u0443 \u0438 \u0432\u0440\u0435\u043C\u044F",
  timePickerDefaultToolbarTitle: "\u0412\u044B\u0431\u0440\u0430\u0442\u044C \u0432\u0440\u0435\u043C\u044F",
  dateRangePickerDefaultToolbarTitle: "\u0412\u044B\u0431\u0440\u0430\u0442\u044C \u043F\u0435\u0440\u0438\u043E\u0434",
  clockLabelText: (view, time, adapter) => `\u0412\u044B\u0431\u0440\u0430\u0442\u044C ${timeViews3[view]}. ${time === null ? "\u0412\u0440\u0435\u043C\u044F \u043D\u0435 \u0432\u044B\u0431\u0440\u0430\u043D\u043E" : `\u0412\u044B\u0431\u0440\u0430\u043D\u043E \u0432\u0440\u0435\u043C\u044F ${adapter.format(time, "fullTime")}`}`,
  hoursClockNumberText: (hours) => `${hours} \u0447\u0430\u0441\u043E\u0432`,
  minutesClockNumberText: (minutes) => `${minutes} \u043C\u0438\u043D\u0443\u0442`,
  secondsClockNumberText: (seconds) => `${seconds} \u0441\u0435\u043A\u0443\u043D\u0434`,
  openDatePickerDialogue: (value, utils) => value !== null && utils.isValid(value) ? `\u0412\u044B\u0431\u0435\u0440\u0438\u0442\u0435 \u0434\u0430\u0442\u0443, \u0432\u044B\u0431\u0440\u0430\u043D\u0430 \u0434\u0430\u0442\u0430 ${utils.format(value, "fullDate")}` : "\u0412\u044B\u0431\u0435\u0440\u0438\u0442\u0435 \u0434\u0430\u0442\u0443",
  openTimePickerDialogue: (value, utils) => value !== null && utils.isValid(value) ? `\u0412\u044B\u0431\u0435\u0440\u0438\u0442\u0435 \u0432\u0440\u0435\u043C\u044F, \u0432\u044B\u0431\u0440\u0430\u043D\u043E \u0432\u0440\u0435\u043C\u044F ${utils.format(value, "fullTime")}` : "\u0412\u044B\u0431\u0435\u0440\u0438\u0442\u0435 \u0432\u0440\u0435\u043C\u044F",
  timeTableLabel: "\u0432\u044B\u0431\u0440\u0430\u0442\u044C \u0432\u0440\u0435\u043C\u044F",
  dateTableLabel: "\u0432\u044B\u0431\u0440\u0430\u0442\u044C \u0434\u0430\u0442\u0443"
};
var ruRU = getPickersLocalization(ruRUPickers);

// node_modules/@mui/x-date-pickers/LocalizationProvider/LocalizationProvider.js
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
var MuiPickersAdapterContext = React2.createContext(null);
if (true) {
  MuiPickersAdapterContext.displayName = "MuiPickersAdapterContext";
}
var warnedOnce = false;
function LocalizationProvider(inProps) {
  const props = useThemeProps({
    props: inProps,
    name: "MuiLocalizationProvider"
  });
  const {
    children,
    dateAdapter: Utils,
    dateFormats,
    dateLibInstance,
    locale,
    adapterLocale,
    localeText
  } = props;
  if (true) {
    if (!warnedOnce && locale !== void 0) {
      warnedOnce = true;
      console.warn("LocalizationProvider's prop `locale` is deprecated and replaced by `adapterLocale`");
    }
  }
  const utils = React2.useMemo(() => new Utils({
    locale: adapterLocale != null ? adapterLocale : locale,
    formats: dateFormats,
    instance: dateLibInstance
  }), [Utils, locale, adapterLocale, dateFormats, dateLibInstance]);
  const defaultDates = React2.useMemo(() => {
    return {
      minDate: utils.date("1900-01-01T00:00:00.000"),
      maxDate: utils.date("2099-12-31T00:00:00.000")
    };
  }, [utils]);
  const contextValue = React2.useMemo(() => {
    return {
      utils,
      defaultDates,
      localeText: _extends({}, DEFAULT_LOCALE, localeText != null ? localeText : {})
    };
  }, [defaultDates, utils, localeText]);
  return (0, import_jsx_runtime2.jsx)(MuiPickersAdapterContext.Provider, {
    value: contextValue,
    children
  });
}
true ? LocalizationProvider.propTypes = {
  adapterLocale: import_prop_types2.default.oneOfType([import_prop_types2.default.object, import_prop_types2.default.string]),
  children: import_prop_types2.default.node,
  dateAdapter: import_prop_types2.default.func.isRequired,
  dateFormats: import_prop_types2.default.shape({
    dayOfMonth: import_prop_types2.default.string,
    fullDate: import_prop_types2.default.string,
    fullDateTime: import_prop_types2.default.string,
    fullDateTime12h: import_prop_types2.default.string,
    fullDateTime24h: import_prop_types2.default.string,
    fullDateWithWeekday: import_prop_types2.default.string,
    fullTime: import_prop_types2.default.string,
    fullTime12h: import_prop_types2.default.string,
    fullTime24h: import_prop_types2.default.string,
    hours12h: import_prop_types2.default.string,
    hours24h: import_prop_types2.default.string,
    keyboardDate: import_prop_types2.default.string,
    keyboardDateTime: import_prop_types2.default.string,
    keyboardDateTime12h: import_prop_types2.default.string,
    keyboardDateTime24h: import_prop_types2.default.string,
    minutes: import_prop_types2.default.string,
    month: import_prop_types2.default.string,
    monthAndDate: import_prop_types2.default.string,
    monthAndYear: import_prop_types2.default.string,
    monthShort: import_prop_types2.default.string,
    normalDate: import_prop_types2.default.string,
    normalDateWithWeekday: import_prop_types2.default.string,
    seconds: import_prop_types2.default.string,
    shortDate: import_prop_types2.default.string,
    weekday: import_prop_types2.default.string,
    weekdayShort: import_prop_types2.default.string,
    year: import_prop_types2.default.string
  }),
  dateLibInstance: import_prop_types2.default.any,
  locale: import_prop_types2.default.oneOfType([import_prop_types2.default.object, import_prop_types2.default.string]),
  localeText: import_prop_types2.default.object
} : void 0;

export {
  getUnit,
  toUnitless,
  MuiPickersAdapterContext,
  LocalizationProvider
};
//# sourceMappingURL=chunk-ZSOBYCQ7.js.map
